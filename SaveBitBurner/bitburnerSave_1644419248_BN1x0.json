{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":429,\"hp\":25,\"max_hp\":25,\"strength\":152,\"defense\":152,\"dexterity\":211,\"agility\":160,\"charisma\":182,\"intelligence\":0,\"hacking_chance_mult\":1.556765497209507,\"hacking_speed_mult\":1.4588147825763038,\"hacking_money_mult\":1.3478489153329063,\"hacking_grow_mult\":1.3478489153329063,\"hacking_exp\":2382008.407584281,\"strength_exp\":17413.88989375645,\"defense_exp\":17413.88989375645,\"dexterity_exp\":17413.88989375645,\"agility_exp\":17413.88989375645,\"charisma_exp\":17082.788112007867,\"intelligence_exp\":0,\"hacking_mult\":1.5900236691953464,\"strength_mult\":1.3478489153329063,\"defense_mult\":1.3478489153329063,\"dexterity_mult\":1.8681185966514082,\"agility_mult\":1.4152413610995516,\"charisma_mult\":1.6174186983994876,\"hacking_exp_mult\":1.660549863690141,\"strength_exp_mult\":1.4826338068661973,\"defense_exp_mult\":1.4826338068661973,\"dexterity_exp_mult\":1.4826338068661973,\"agility_exp_mult\":1.4826338068661973,\"charisma_exp_mult\":1.4826338068661973,\"company_rep_mult\":1.3478489153329063,\"faction_rep_mult\":1.3478489153329063,\"money\":27910034165.121803,\"city\":\"Aevum\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"1go-1\",\"1go-2\",\"1go-3\",\"1go-4\",\"1to-1\",\"1to-2\",\"1to-3\",\"1to-4\",\"1to-5\",\"auto-1to-0\",\"v1.0.0-1to-0\",\"v1.0.1-1to-0\",\"v1.0.2-1to-0\",\"v1.0.2-1to-1\",\"v1.0.2-1to-0-0\",\"v1.0.2-1to-1-0\",\"v1.0.2-1to-2\",\"v1.0.2-1to-3\",\"v1.0.2-1to-4\",\"v1.0.2-1to-5\",\"v1.0.2-1to-6\",\"v1.0.2-1to-7\",\"v1.0.2-1to-8\",\"v1.0.2-1to-9\",\"v1.0.3-1to-0\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":104021.79999991982,\"ram\":64,\"totalMoneyGenerated\":2839303110.9357123,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":104021.59999991982,\"ram\":64,\"totalMoneyGenerated\":2838168389.419712,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":104018.79999991982,\"ram\":64,\"totalMoneyGenerated\":2836951411.9145384,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":104009.99999991978,\"ram\":64,\"totalMoneyGenerated\":2835703024.032604,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":103925.79999991937,\"ram\":64,\"totalMoneyGenerated\":2834407419.621394,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":103672.19999991816,\"ram\":64,\"totalMoneyGenerated\":2833131627.453821,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":103331.59999991654,\"ram\":64,\"totalMoneyGenerated\":2831758575.46017,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":103019.19999991504,\"ram\":64,\"totalMoneyGenerated\":2830417187.558333,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":102775.59999991387,\"ram\":64,\"totalMoneyGenerated\":2829164260.8213773,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":102282.59999991159,\"ram\":64,\"totalMoneyGenerated\":2827773643.581439,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":99420.19999991111,\"ram\":64,\"totalMoneyGenerated\":2739632580.7895656,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":99145.59999991137,\"ram\":64,\"totalMoneyGenerated\":2738440524.998409,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":97831.59999991256,\"ram\":64,\"totalMoneyGenerated\":2735553425.329163,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":96144.7999999117,\"ram\":64,\"totalMoneyGenerated\":2730203438.6088896,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":94584.39999990493,\"ram\":64,\"totalMoneyGenerated\":2717588171.9650955,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":93685.9999999032,\"ram\":64,\"totalMoneyGenerated\":2701197384.6276784,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":92849.39999990321,\"ram\":64,\"totalMoneyGenerated\":2683398564.4593678,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":92656.39999990321,\"ram\":64,\"totalMoneyGenerated\":2678332998.488895,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":92432.39999990321,\"ram\":64,\"totalMoneyGenerated\":2672218051.7556148,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":91605.39999990322,\"ram\":64,\"totalMoneyGenerated\":2651554789.497356,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":90452.39999990338,\"ram\":64,\"totalMoneyGenerated\":2623809833.1133137,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":87344.9999999056,\"ram\":64,\"totalMoneyGenerated\":2535626827.005986,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":28612.00000000992,\"ram\":64,\"totalMoneyGenerated\":886911121.9826913,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":28382.200000009932,\"ram\":64,\"totalMoneyGenerated\":880140256.6867719,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":28193.000000009913,\"ram\":64,\"totalMoneyGenerated\":864356291.2144265,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":27694.40000000982,\"ram\":64,\"totalMoneyGenerated\":857502836.8278227,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":27477.40000000979,\"ram\":64,\"totalMoneyGenerated\":849795712.7461188,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":27228.60000000978,\"ram\":64,\"totalMoneyGenerated\":844246318.3833706,\"name\":\"hacknet-node-27\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":22763.400000011967,\"ram\":64,\"totalMoneyGenerated\":646462355.5322344,\"name\":\"hacknet-node-28\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"Sector-12\",\"CyberSec\",\"Aevum\",\"Tian Di Hui\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"}],\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":30,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.3478489153329063,\"crime_success_mult\":1.3478489153329063,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"Tian Di Hui\",\"currentWorkFactionDescription\":\"performing security detail\",\"workHackExpGainRate\":0.08302749318450706,\"workStrExpGainRate\":0.2223950710299296,\"workDefExpGainRate\":0.2223950710299296,\"workDexExpGainRate\":0.2223950710299296,\"workAgiExpGainRate\":0.2223950710299296,\"workChaExpGainRate\":0,\"workRepGainRate\":0.3052359389800059,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":75.47199130471787,\"workStrExpGained\":202.1571195662044,\"workDefExpGained\":202.1571195662044,\"workDexExpGained\":202.1571195662044,\"workAgiExpGained\":202.1571195662044,\"workChaExpGained\":0,\"workRepGained\":276.9533961934176,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":227000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.3478489153329063,\"hacknet_node_money_mult\":3.3994013253054023,\"hacknet_node_purchase_cost_mult\":0.5658707856420343,\"hacknet_node_ram_cost_mult\":0.7397003733882802,\"hacknet_node_core_cost_mult\":0.7397003733882802,\"hacknet_node_level_cost_mult\":0.6287453173800381,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1644419248105,\"totalPlaytime\":2597942200,\"playtimeSinceLastAug\":109821600,\"playtimeSinceLastBitnode\":2597942200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":9502452527.75655,\"hacknet\":66373750132.31213,\"hacknet_expenses\":-45937881652.78868,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-1791845.1573645198,\"total\":27909034165.1218,\"work\":0,\"servers\":-1408000000,\"other\":-306800000,\"augmentations\":-312695000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-47017920,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":62024560514.73478,\"hacknet\":1711707952352.0342,\"hacknet_expenses\":-1026305036308.6075,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-36843644264.353905,\"total\":379671338815.18964,\"work\":9039456.854541358,\"servers\":-10495528016.595041,\"other\":-308000000,\"augmentations\":-320070987180.44885}},\"scriptProdSinceLastAug\":9356055346.921833,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1641821373263},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641916555235},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641933740578},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641973495578},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641982477832},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642005851849},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642067315302},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642068324076},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1642152452688},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642686556593},{\"ID\":\"TOR\",\"unlockedOn\":1642686796601},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1642757053593},{\"ID\":\"4S\",\"unlockedOn\":1643193189309},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1643383422775},{\"ID\":\"TRAVEL\",\"unlockedOn\":1643395169421},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1643821617662},{\"ID\":\"DONATION\",\"unlockedOn\":1644309473098},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1644397741752},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1644397741788}],\"factionWorkType\":\"Faction Security Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"37.1.5.8\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"FTPCrack.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"relaySMTP.exe\",\"DeepscanV2.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":957.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"purchase.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":74111.348,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29803.010000037528,\"pid\":1,\"ramUsage\":5.7,\"server\":\"home\",\"threads\":100,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[13218500,1375,1375,0],\"CSEC\":[0,4250,0,250],\"neo-net\":[70561375,250,1875,500],\"phantasy\":[0,0,625,250],\"omega-net\":[420291125,125,875,375],\"foodnstuff\":[0,0,750,125],\"sigma-cosmetics\":[0,0,750,125],\"joesguns\":[0,0,750,125],\"hong-fang-tea\":[46308000,125,2375,125],\"zer0\":[98177375,125,1375,250],\"silver-helix\":[0,0,1125,375],\"max-hardware\":[100222500,125,625,125],\"harakiri-sushi\":[60038375,125,1500,125],\"nectar-net\":[0,0,750,125],\"iron-gym\":[0,0,625,250],\"avmnite-02h\":[0,750,0,0],\"crush-fitness\":[0,0,125,500],\"johnson-ortho\":[0,0,125,375],\"the-hub\":[340971250,125,125,500],\"I.I.I.I\":[0,375,0,0],\"comptek\":[0,0,0,250],\"rothman-uni\":[0,0,0,125]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1085008.3475361147,\"offlineMoneyMade\":0,\"offlineRunningTime\":74111.373,\"onlineExpGained\":301050.3483061091,\"onlineMoneyMade\":1149788500,\"onlineRunningTime\":25260.410000029373,\"pid\":2,\"ramUsage\":3.1,\"server\":\"home\",\"threads\":125,\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/74bb378f-8873-4952-bbee-25243596899f\",\"moduleSequenceNumber\":165}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tmyPrint(ns, 'START ma super fonction');\\n\\tlet hostName = ns.getHostname();\\n\\tlet scan = ns.scan();\\n\\n\\tmyPrint(ns, hostName);\\n\\tmyPrint(ns, scan);\\n\\n\\twhile(true) {\\n\\t\\tfor(let i = 0; i < scan.length; i++) {\\n\\t\\t\\tlet serverToHack = scan[i];\\n\\t\\t\\tmyPrint(ns, serverToHack);\\n\\t\\t\\tawait myHack(ns, serverToHack);\\n\\t\\t}\\n\\n\\t\\tlet hackingLevel = ns.getHackingLevel();\\n\\t\\tmyPrint(ns, hackingLevel);\\n\\n\\t\\tmyPrint(ns, 'END ma super fonction');\\n\\t}\\n}\\n\\nexport function myPrint(ns, toPrint) {\\n\\t// ns.tprint(toPrint);\\n}\\n\\nexport async function myHack(ns, serveur) {\\n\\tvar target = serveur;\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\tmyPrint(ns, 'weaken');\\n        await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\tmyPrint(ns, 'grow');\\n        await ns.grow(target);\\n    } else {\\n\\t\\tmyPrint(ns, 'hack');\\n        await ns.hack(target);\\n\\t\\tns.run('Nuke.exe');\\n    }\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:https://danielyxie.github.io/18400b9f-28b9-456b-9cb1-b60a86736662\"}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home\",\"moduleSequenceNumber\":15,\"_hash\":\"7d05a8cedf00316fe4cc398da9f2b78c4eed5648030dfb355188b6e9b606570c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//foo.js\\nlet globalVariable;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    globalVariable = ns.args.length;\\n    while(true) {\\n        ns.tprint(globalVariable);\\n        await ns.sleep(3000);\\n    }\\n}\",\"filename\":\"foo.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"foo.js\",\"url\":\"blob:https://danielyxie.github.io/0f719eb6-3dc2-4806-b0dd-90c38672c3a8\"}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":16,\"_hash\":\"ed911c27bd6ea9b2aabebcf2a8e4f9895308fd4ffde79d84cfaa7e1b1afc9b65\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import * as namespace from \\\"script filename\\\"; //Import all functions from script\\n// import {fn1, fn2, ...} from \\\"script filename\\\"; //Import specific functions from script\\n\\nimport * as fileName from \\\"fileName.js\\\";\\n\\nlet globalNs;\\nlet argsZero;\\n\\n\\nexport function myPrint(toPrint) {\\n\\tglobalNs.tprint(toPrint);\\n}\\n\\nexport async function main(ns) {\\n\\n\\tglobalNs = ns;\\n\\targsZero = ns.args[0];\\n\\n\\tmyPrint('The START on ' + argsZero);\\n\\tlet earlyHackFileName = fileName.getEarlyHackFileName();\\n\\tlet hackFileName = fileName.getHackFileName();\\n\\n\\tmyPrint('The START on ' + argsZero);\\n\\tmyPrint('The START on ' + argsZero);\\n\\n\\tlet hostName = globalNs.getHostname();\\n\\tlet scans = globalNs.scan();\\n\\tlet isFileExist = false;\\n\\n\\n\\tthis.toPrint\\n\\tmyPrint(hostName);\\n\\tmyPrint(scans);\\n\\n\\tfor (let i = 0; i < scans.length; i++) {\\n\\t\\tlet serverToHack = scans[i];\\n\\t\\tmyPrint(serverToHack);\\n\\t\\tisFileExist = globalNs.fileExists(hackFileName, serverToHack);\\n\\t\\tif (isFileExist) {\\n\\t\\t\\tmyPrint('File exist -> ' + hackFileName);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tmyPrint('File doesn\\\\'t exist -> ' + hackFileName);\\n\\t\\tlet securityLevel = globalNs.getServerSecurityLevel(serverToHack);\\n\\t\\tmyPrint('securityLevel : ' + securityLevel);\\n\\n\\t\\t// scp();\\n\\n\\n\\t\\t/*\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(serverToHack);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(serverToHack);\\n\\t\\t\\t\\t}\\n\\t\\t*/\\n\\n\\t\\t/*\\n\\t\\t\\t\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\t\\t\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(target);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.nuke(target);\\n\\t\\t\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\t\\t\\tmyPrint(ns, 'weaken');\\n\\t\\t\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\t\\t\\tmyPrint(ns, 'grow');\\n\\t\\t\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tmyPrint(ns, 'hack');\\n\\t\\t\\t\\t\\tawait ns.hack(target);\\n\\t\\t\\t\\t\\tns.run('Nuke.exe');\\n\\t\\t\\t\\t}\\n\\t\\t*/\\n\\t}\\n\\n\\n\\tmyPrint('The END on ' + argsZero);\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"fileName.js\",\"url\":\"blob:https://danielyxie.github.io/a803d115-f870-4e5c-8db2-b9b19bf69160\",\"moduleSequenceNumber\":516},{\"filename\":\"early-hack-template.js\",\"url\":\"blob:https://danielyxie.github.io/90b40963-7a2b-411e-8a51-b1140ab15f78\",\"moduleSequenceNumber\":578}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"home\",\"moduleSequenceNumber\":17,\"_hash\":\"9d0e7463aa9d355fca61279d782a9c65a77e9ba4a76fc391dc5dbed6e44bd4e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function myMoney() {\\n    return getServerMoneyAvailable(\\\"home\\\");\\n}\\n\\nvar cnt = 10;\\n\\nwhile(hacknet.numNodes() < cnt) {\\n    res = hacknet.purchaseNode();\\n    print(\\\"Purchased hacknet Node with index \\\" + res);\\n};\\n\\nfor (var i = 0; i < cnt; i++) {\\n    while (hacknet.getNodeStats(i).level < 89) {\\n        var cost = hacknet.getLevelUpgradeCost(i, 1);\\n        while (myMoney() < cost) {\\n            print(\\\"Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n            sleep(3000);\\n        }\\n        res = hacknet.upgradeLevel(i, 10);\\n    };\\n};\\n\\nprint(\\\"All nodes upgraded to level 80\\\");\\n\\nfor (var i = 0; i < cnt; i++) {\\n    while (hacknet.getNodeStats(i).ram < 16) {\\n        var cost = hacknet.getRamUpgradeCost(i, 2);\\n        while (myMoney() < cost) {\\n            print(\\\"Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n            sleep(3000);\\n        }\\n        res = hacknet.upgradeRam(i, 2);\\n    };\\n};\\n\\nprint(\\\"All nodes upgraded to 16GB RAM\\\");\\n\\nfor (var i = 0; i < cnt; i++) {\\n    while (hacknet.getNodeStats(i).cores < 8) {\\n        var cost = hacknet.getCoreUpgradeCost(i, 1);\\n        while (myMoney() < cost) {\\n            print(\\\"Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n            sleep(3000);\\n        }\\n        res = hacknet.upgradeCore(i, 1);\\n    };\\n};\\n\\nprint(\\\"All nodes upgraded to 8 cores\\\");\",\"filename\":\"purchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"purchase.js\",\"url\":\"blob:https://danielyxie.github.io/e84110c8-789c-4d66-88de-4d22ddd33b87\"}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":18,\"_hash\":\"7942ce07cbbeb3a7503b1bcb96d3d45e954f54fd1725b31f150bafb15d924804\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function myMoney() {\\n    return getServerMoneyAvailable(\\\"home\\\");\\n}\\n\\nfunction isAllSameThanFirst() {\\n    var cnt = hacknet.numNodes();\\n    var nodeStats = hacknet.getNodeStats(0);\\n    var level = nodeStats.level;\\n    var ram = nodeStats.ram;\\n    var cores = nodeStats.cores;\\n\\n    for (var i = 1; i < cnt; i++) {\\n        var nodeStatsOthers = hacknet.getNodeStats(i);\\n        var levelOther = nodeStatsOthers.level;\\n        var ramOther = nodeStatsOthers.ram;\\n        var coresOther = nodeStatsOthers.cores;\\n        if (level != levelOther || ram != ramOther || cores != coresOther) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n\\nfunction mySleep()\\n{\\n    sleep(10000);\\n}\\n\\nfunction upgrade() {\\n    var cnt = hacknet.numNodes();\\n    for (var i = 0; i < cnt; i++) {\\n        while (hacknet.getNodeStats(i).level < level) {\\n            var cost = hacknet.getLevelUpgradeCost(i, 1);\\n            while (myMoney() < cost) {\\n                print(\\\"Lvl Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n                sleepTimeToCost(cost);\\n            }\\n            res = hacknet.upgradeLevel(i, 1);\\n        };\\n        while (hacknet.getNodeStats(i).ram < ram) {\\n            var cost = hacknet.getRamUpgradeCost(i, 1);\\n            while (myMoney() < cost) {\\n                print(\\\"RAM Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n                sleepTimeToCost(cost);\\n            }\\n            res = hacknet.upgradeRam(i, 1);\\n        };\\n        while (hacknet.getNodeStats(i).cores < cores) {\\n            var cost = hacknet.getCoreUpgradeCost(i, 1);\\n            while (myMoney() < cost) {\\n                print(\\\"CORE Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n                sleepTimeToCost(cost);\\n            }\\n            res = hacknet.upgradeCore(i, 1);\\n        };\\n    };\\n}\\n\\nfunction sleepTimeToCost(cost)\\n{\\n    var money = myMoney();\\n    sleep(1000);\\n    var moneyPlusOneSecond = myMoney();\\n    hacknetLastTOCost = cost - moneyPlusOneSecond;\\n\\n    var moneyPerSeconde = moneyPlusOneSecond - money;\\n    var timeSleep = hacknetLastTOCost / moneyPerSeconde * 1000;\\n    print(\\\"Money per second: \\\" + moneyPerSeconde);\\n    print(\\\"Time before purchase : \\\" + timeSleep);\\n    sleep(timeSleep);\\n}\\n\\ndisableLog(\\\"getServerMoneyAvailable\\\");\\ndisableLog(\\\"sleep\\\");\\n\\nif (hacknet.numNodes() == 0) {\\n    hacknet.purchaseNode();\\n    hacknet.purchaseNode();\\n}\\n\\nvar cnt = 2;\\nvar level = 10;\\nvar ram = 1;\\nvar cores = 1;\\nwhile (true) {\\n    var cnt = hacknet.numNodes();\\n    var level = hacknet.getNodeStats(0).level;\\n    var ram = hacknet.getNodeStats(0).ram;\\n    var cores = hacknet.getNodeStats(0).cores;\\n    var levelCost = hacknet.getLevelUpgradeCost(0, 1);\\n    var tenLevelCost = hacknet.getLevelUpgradeCost(0, 10);\\n    var ramCost = hacknet.getRamUpgradeCost(0, 1);\\n    var coresCost = hacknet.getCoreUpgradeCost(0, 1)\\n    var hacknetCost = hacknet.getPurchaseNodeCost();\\n\\n    if (isAllSameThanFirst()) {\\n        if ((hacknetCost < coresCost * 5 && hacknetCost < tenLevelCost) || cores == 16) {\\n            cnt++;\\n            while (hacknet.numNodes() < cnt) {\\n                res = hacknet.purchaseNode();\\n                print(\\\"Purchased hacknet Node with index \\\" + res);\\n                // TODO faire une fonction qui calcule le temps de sleep + 1s\\n                sleepTimeToCost(hacknetCost)\\n            };\\n        } else {\\n            if (tenLevelCost < coresCost && level < 200) {\\n                level = level + 10;\\n                if (level > 200) {\\n                    level = 200;\\n                }\\n            }\\n            if (ramCost < coresCost && ram < 64) {\\n                ram = ram * 2;\\n            } else if (coresCost < hacknetCost && cores < 16) {\\n                cores++;\\n            }\\n        }\\n    }\\n\\n    print(\\\"init cnt : \\\" + cnt);\\n    print(\\\"init level : \\\" + level);\\n    print(\\\"init ram : \\\" + ram);\\n    print(\\\"init cores : \\\" + cores);\\n\\n    upgrade();\\n\\n    print(\\\"All nodes upgraded to level \\\" + level);\\n    print(\\\"All nodes upgraded to \\\" + ram + \\\"GB RAM\\\");\\n    print(\\\"All nodes upgraded to \\\" + cores + \\\" cores\\\");\\n}\",\"filename\":\"purchase.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":19,\"_hash\":\"d953de1813c1d1ecf118bfa188e9a0162a7e62bd4541913157502952df6c0698\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n    print('testOut');\\n\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"saveEarly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":20,\"_hash\":\"b16cd74d13a5942555f8b92a9c006357f83ef28391a36cabd084770cc2851466\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/de037392-d1ab-41ee-922c-924fe58596bf\",\"moduleSequenceNumber\":33}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":21,\"_hash\":\"b7748eba220c8a43854fbcc23649b0dd6b0b2d18f5ac867e0f1aac9f798430e3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getEarlyHackFileName() \\n{\\n    return 'early-hack-template.js';\\n}\\n\\nexport function getHackFileName()\\n{\\n    return 'hack.js';\\n}\",\"filename\":\"fileName.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":22,\"_hash\":\"b73141400da60b800c4a9796aaf9fc4cc3cde3d3c0e02632b7969cbcaadd1110\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/c39fd8bf-5cd0-4578-9d96-ba7190641aab\",\"moduleSequenceNumber\":29}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":29,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet home;\\nlet fileNameToCopyAndRun;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    globalNs = ns;\\n    home = \\\"home\\\";\\n    fileNameToCopyAndRun = 'hackHome.js';\\n    let nbServerToBuy = 25;\\n\\n    myPrint(globalNs);\\n    myPrint(home);\\n\\n    let myMoney = ns.getServerMoneyAvailable(home);\\n    myPrint(myMoney);\\n\\n    for (let i = 0; i < nbServerToBuy; i++) {\\n        let serverNameToBuy = '1to-' + i;\\n        myPrint('serveur Name to buy : ' + serverNameToBuy);\\n\\n        ns.purchaseServer(serverNameToBuy, 1024);\\n        await ns.scp(fileNameToCopyAndRun, home, serverNameToBuy);\\n        ns.exec(fileNameToCopyAndRun, serverNameToBuy, 330, home);\\n\\n        myPrint('BUY COPY and RUN OK');\\n    }\\n    \\n    myPrint('All serveur BUY !!!');\\n    \\n    // purchaseServer(hostname, ram);\\n    // run(script, numThreads, args);\\n\\n// purchaseServeurHackAndRunIt.js: \\n// {\\\"gang\\\":{},\\\"bladeburner\\\":{},\\\"codingcontract\\\":{},\\\"sleeve\\\":{},\\\"corporation\\\":{},\\\"stanek\\\":{},\\n// \\\"ui\\\":{},\\\"formulas\\\":{\\\"skills\\\":{},\\\"hacking\\\":{},\\\"hacknetNodes\\\":{},\\\"hacknetServers\\\":{},\\n// \\\"gang\\\":{}},\\\"stock\\\":{},\\\"args\\\":[\\\"home\\\"],\\\"hacknet\\\":{},\\\"heart\\\":{}}\\n// purchaseServeurHackAndRunIt.js: home\\n}\",\"filename\":\"purchaseServeurHackAndRunIt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"purchaseServeurHackAndRunIt.js\",\"url\":\"blob:https://danielyxie.github.io/a28f4559-3951-4e9c-ae67-a687bddd45f5\",\"moduleSequenceNumber\":1972}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"home\",\"moduleSequenceNumber\":2178,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"1go-1\",\"1go-2\",\"1go-3\",\"1go-4\",\"darkweb\",\"1to-1\",\"1to-2\",\"1to-3\",\"1to-4\",\"1to-5\",\"auto-1to-0\",\"v1.0.0-1to-0\",\"v1.0.1-1to-0\",\"v1.0.2-1to-0\",\"v1.0.2-1to-1\",\"v1.0.2-1to-0-0\",\"v1.0.2-1to-1-0\",\"v1.0.2-1to-2\",\"v1.0.2-1to-3\",\"v1.0.2-1to-4\",\"v1.0.2-1to-5\",\"v1.0.2-1to-6\",\"v1.0.2-1to-7\",\"v1.0.2-1to-8\",\"v1.0.2-1to-9\",\"v1.0.3-1to-0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":2.009750000000002,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"50.1.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":56445890396,\"moneyMax\":1411147259900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1053,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"39.1.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":56885383762,\"moneyMax\":1422134594050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1253,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"14.1.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":18910010271,\"moneyMax\":472750256775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1072,\"serverGrowth\":64}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"32.0.7.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":36192767288,\"moneyMax\":904819182200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":932,\"serverGrowth\":64}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"47.8.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":29574015244,\"moneyMax\":739350381100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1209,\"serverGrowth\":76}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"49.4.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":17465981109,\"moneyMax\":436649527725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1060,\"serverGrowth\":64}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"21.9.5.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":20364091332,\"moneyMax\":509102283300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":951,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"89.7.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":19942118472,\"moneyMax\":498552961800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1019,\"serverGrowth\":89}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"58.5.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":21638715959,\"moneyMax\":540967898975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1059,\"serverGrowth\":97}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-755939.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,1,0,1,0,0,0,0,1],[0,0,0,0,1,1,0,0,0,0,0],[1,0,1,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"53.8.0.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1786995306,\"moneyMax\":44674882650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1226,\"serverGrowth\":86}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"14.1.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1266,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"76.2.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1058218644,\"moneyMax\":26455466100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":961,\"serverGrowth\":85}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"73.9.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":942194479,\"moneyMax\":23554861975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":998,\"serverGrowth\":61}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"41.4.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":804863927,\"moneyMax\":20121598175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":919,\"serverGrowth\":43}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"19.8.4.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":627081349,\"moneyMax\":15677033725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":810,\"serverGrowth\":70}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"90.8.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":784606313,\"moneyMax\":19615157825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":781,\"serverGrowth\":65}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"66.8.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":943527612,\"moneyMax\":23588190300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":904,\"serverGrowth\":94}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"50.3.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1199356328,\"moneyMax\":29983908200,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":814,\"serverGrowth\":87}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"51.1.6.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":785855065,\"moneyMax\":19646376625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":79}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"24.3.1.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":521042301,\"moneyMax\":13026057525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":85}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"30.7.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":865084252,\"moneyMax\":21627106300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":940,\"serverGrowth\":75}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"20.5.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":760157228,\"moneyMax\":19003930700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":848,\"serverGrowth\":87}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"72.7.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1086871839,\"moneyMax\":27171795975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":914,\"serverGrowth\":58}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"54.3.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":961480545,\"moneyMax\":24037013625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":941,\"serverGrowth\":62}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"76.6.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":1055708288,\"moneyMax\":26392707200,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":75}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"21.7.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":868376567,\"moneyMax\":21709414175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"49.4.3.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":839745519,\"moneyMax\":20993637975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":763,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"39.4.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1396805545,\"moneyMax\":34920138625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":890,\"serverGrowth\":67}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"3.3.7.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"omnia\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1734699434,\"moneyMax\":43367485850,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":813,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"17.7.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1201600578,\"moneyMax\":30040014450,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":844,\"serverGrowth\":66}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"48.8.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1342356135,\"moneyMax\":33558903375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":831,\"serverGrowth\":71}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"63.6.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1038089828,\"moneyMax\":25952245700,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":814,\"serverGrowth\":80}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"25.9.3.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":790458598,\"moneyMax\":19761464950,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":700,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-109477.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,12],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"37.2.1.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":538980922,\"moneyMax\":13474523050,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":520,\"serverGrowth\":44}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"98.3.6.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":722455178,\"moneyMax\":18061379450,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":582,\"serverGrowth\":60}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-599398-Aevum.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,2,0,7,3,9,0,1,6,10,1,2,3],\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"47.0.2.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":389197436,\"moneyMax\":9729935900,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":428,\"serverGrowth\":41}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"87.5.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":19.64,\"minDifficulty\":17,\"moneyAvailable\":336262252.27508366,\"moneyMax\":4387882600,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":397,\"serverGrowth\":43}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"9.5.6.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":891984104,\"moneyMax\":22299602600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":729,\"serverGrowth\":82}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"8.4.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":208950129,\"moneyMax\":5223753225,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":455,\"serverGrowth\":47}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"63.6.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":519583232,\"moneyMax\":12989580800,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":608,\"serverGrowth\":68}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"60.5.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":513197672,\"moneyMax\":12829941800,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":429,\"serverGrowth\":41}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"58.1.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":12,\"minDifficulty\":12,\"moneyAvailable\":995006546.743519,\"moneyMax\":3779633850,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":312,\"serverGrowth\":51}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"33.9.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":223277033,\"moneyMax\":5581925825,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":380,\"serverGrowth\":55}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"39.1.4.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":424,\"serverGrowth\":66}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"9.6.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":102999136.66228963,\"moneyMax\":1914486400,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":260,\"serverGrowth\":52}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"35.7.3.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":4.006,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"91.0.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":6.0717500000000015,\"minDifficulty\":3,\"moneyAvailable\":3892166.1980918585,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"24.5.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":6.0717500000000015,\"minDifficulty\":3,\"moneyAvailable\":8698544.40854385,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"74.5.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":26926648.758570135,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"71.7.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"60.4.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":38040015.240870364,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"48.6.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"comptek\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":1087617.0549581996,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"21.5.3.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"84.6.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.490875000000001,\"minDifficulty\":5,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-155053.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)(a))a)a()\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"38.3.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-895012-Sector-12.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,0,5,4,4,0,0,0,0,2,9,5,7,0],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"7.7.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"65.7.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":127274170.55225699,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-725457.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":596649485,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-599571.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,1,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"97.9.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":9,\"minDifficulty\":9,\"moneyAvailable\":1635547650,\"moneyMax\":1635547650,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":185,\"serverGrowth\":33}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"10.6.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":53621527.53032423,\"moneyMax\":1117030475,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":261,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"56.7.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":77363136.74628828,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"20.0.3.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":486,\"serverGrowth\":30}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-168834-Sector-12.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,1,0,0,0,1],[0,0,0,0,0,0,0,1,1,0],[0,1,0,1,0,1,1,0,0,0],[0,0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0],[0,1,0,0,0,0,1,0,0,0]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"23.6.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1028,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"0.6.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":759,\"serverGrowth\":49}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-489325.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,1,0],[0,1,0,0,0,0,1,0],[0,1,0,0,0,0,1,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"78.7.5.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":525,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-42955-Sector-12.cct\",\"type\":\"Total Ways to Sum\",\"data\":36,\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"32.8.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":343,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"75.5.0.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":2.25,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":208,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"63.1.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":506,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"56.4.5.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"n00dles\",\"neo-net\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":1.4100000000000001,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":52,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"32.3.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"1.9.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"1go-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"1go-1\",\"httpPortOpen\":false,\"ip\":\"55.7.3.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[2817750,990,990,0],\"CSEC\":[0,1650,0,330],\"neo-net\":[98397676.92183231,660,660,330],\"the-hub\":[1655916240,660,330,660],\"rothman-uni\":[0,0,0,330],\"I.I.I.I\":[0,330,0,0],\"comptek\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":33914.970057919876,\"offlineMoneyMade\":0,\"offlineRunningTime\":16738.094,\"onlineExpGained\":86092.05652077189,\"onlineMoneyMade\":1757131666.9218323,\"onlineRunningTime\":5567.009999997606,\"pid\":3,\"ramUsage\":3.1,\"server\":\"1go-1\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/2a5114b7-3ec4-4a55-8c70-0f2818cf8df6\",\"moduleSequenceNumber\":30}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"1go-1\",\"moduleSequenceNumber\":30,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"1go-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"1go-2\",\"httpPortOpen\":false,\"ip\":\"30.5.6.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[0,660,1320,0],\"CSEC\":[0,1650,0,330],\"neo-net\":[0,330,990,330],\"the-hub\":[0,0,330,660],\"I.I.I.I\":[0,660,0,0],\"rothman-uni\":[0,0,0,330],\"comptek\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":33646.30393047439,\"offlineMoneyMade\":0,\"offlineRunningTime\":16738.1,\"onlineExpGained\":73998.16529472641,\"onlineMoneyMade\":0,\"onlineRunningTime\":5548.609999997623,\"pid\":4,\"ramUsage\":3.1,\"server\":\"1go-2\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/27d7b293-5a85-4dbc-a1c1-dcd4e5e57627\",\"moduleSequenceNumber\":31}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"1go-2\",\"moduleSequenceNumber\":31,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"1go-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"1go-3\",\"httpPortOpen\":false,\"ip\":\"8.3.1.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[1750000,990,990,0],\"CSEC\":[0,1650,0,330],\"neo-net\":[125000000,330,990,330],\"the-hub\":[1479632880,330,330,660],\"I.I.I.I\":[0,660,0,0],\"rothman-uni\":[0,0,0,330],\"comptek\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":33646.31242667914,\"offlineMoneyMade\":0,\"offlineRunningTime\":16738.104,\"onlineExpGained\":83004.21076484499,\"onlineMoneyMade\":1606382880,\"onlineRunningTime\":5538.609999997632,\"pid\":5,\"ramUsage\":3.1,\"server\":\"1go-3\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/621c2529-f1f8-4791-94e9-43939065b612\",\"moduleSequenceNumber\":32}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"1go-3\",\"moduleSequenceNumber\":32,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"1go-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"1go-4\",\"httpPortOpen\":false,\"ip\":\"93.9.8.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[0,660,990,330],\"CSEC\":[0,1650,0,330],\"neo-net\":[0,330,990,330],\"the-hub\":[1511125110,330,330,660],\"I.I.I.I\":[0,660,0,0],\"rothman-uni\":[0,0,0,330],\"comptek\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":33646.32329130501,\"offlineMoneyMade\":0,\"offlineRunningTime\":16738.109,\"onlineExpGained\":79179.31508037016,\"onlineMoneyMade\":1511125110,\"onlineRunningTime\":5529.60999999764,\"pid\":6,\"ramUsage\":3.1,\"server\":\"1go-4\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/6d282099-574d-433a-8dac-bb39d084bcdc\",\"moduleSequenceNumber\":33}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"1go-4\",\"moduleSequenceNumber\":33,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"75.8.9.9\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"1to-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"1to-1\",\"httpPortOpen\":false,\"ip\":\"71.6.0.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[1750000,330,330,0],\"CSEC\":[0,660,0,0],\"neo-net\":[0,0,330,330],\"the-hub\":[1555907100,330,660,0],\"rothman-uni\":[0,0,0,330],\"I.I.I.I\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":43927.831666118036,\"onlineMoneyMade\":1557657100,\"onlineRunningTime\":3368.2099999992774,\"pid\":7,\"ramUsage\":3.1,\"server\":\"1to-1\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/9bc3da6b-a2d4-4e1e-a3ca-13d86f105c5b\",\"moduleSequenceNumber\":114}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"1to-1\",\"moduleSequenceNumber\":114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"1to-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"1to-2\",\"httpPortOpen\":false,\"ip\":\"12.4.0.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[1750000,330,330,0],\"CSEC\":[0,660,0,0],\"neo-net\":[0,0,330,330],\"the-hub\":[914506230,330,660,0],\"rothman-uni\":[0,0,0,330],\"I.I.I.I\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":43927.831666118036,\"onlineMoneyMade\":916256230,\"onlineRunningTime\":3357.809999999275,\"pid\":8,\"ramUsage\":3.1,\"server\":\"1to-2\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/06dd1afa-8025-4268-8c98-d6257233495a\",\"moduleSequenceNumber\":115}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"1to-2\",\"moduleSequenceNumber\":115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"1to-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"1to-3\",\"httpPortOpen\":false,\"ip\":\"54.3.3.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[0,0,330,330],\"CSEC\":[0,660,0,0],\"neo-net\":[0,0,330,330],\"the-hub\":[534232050,330,660,0],\"rothman-uni\":[0,0,0,330],\"I.I.I.I\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":43927.831666118036,\"onlineMoneyMade\":534232050,\"onlineRunningTime\":3349.409999999273,\"pid\":9,\"ramUsage\":3.1,\"server\":\"1to-3\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/e866bf99-2e6a-493e-b3b0-8a67213f79c9\",\"moduleSequenceNumber\":135}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"1to-3\",\"moduleSequenceNumber\":135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"1to-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"1to-4\",\"httpPortOpen\":false,\"ip\":\"55.1.7.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[1750000,330,0,330],\"CSEC\":[0,660,0,0],\"neo-net\":[0,0,330,330],\"the-hub\":[0,0,660,0],\"rothman-uni\":[0,0,0,330],\"I.I.I.I\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38746.68188047429,\"onlineMoneyMade\":1750000,\"onlineRunningTime\":3342.409999999273,\"pid\":10,\"ramUsage\":3.1,\"server\":\"1to-4\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/9ada09cb-393a-4497-b84e-33c1d5acbf72\",\"moduleSequenceNumber\":136}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"1to-4\",\"moduleSequenceNumber\":136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"1to-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"1to-5\",\"httpPortOpen\":false,\"ip\":\"73.7.0.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[0,0,330,330],\"CSEC\":[0,330,0,330],\"neo-net\":[0,0,330,330],\"the-hub\":[313759710,330,660,0],\"rothman-uni\":[0,0,0,330],\"I.I.I.I\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":44670.331666118036,\"onlineMoneyMade\":313759710,\"onlineRunningTime\":3335.8099999992787,\"pid\":11,\"ramUsage\":3.1,\"server\":\"1to-5\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/296c758d-7704-43d9-9d5d-ffdb5329e45c\",\"moduleSequenceNumber\":137}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"1to-5\",\"moduleSequenceNumber\":137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"auto-1to-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"auto-1to-0\",\"httpPortOpen\":false,\"ip\":\"86.7.2.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[1750000,330,330,0],\"CSEC\":[0,660,0,0],\"neo-net\":[0,0,330,330],\"the-hub\":[0,0,330,0],\"rothman-uni\":[0,0,330,0]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":29121.432237734705,\"onlineMoneyMade\":1750000,\"onlineRunningTime\":1013.4100000000738,\"pid\":27,\"ramUsage\":3.1,\"server\":\"auto-1to-0\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/d9724bfd-1610-41cb-a29f-d7824d271cb1\",\"moduleSequenceNumber\":1385}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"auto-1to-0\",\"moduleSequenceNumber\":1385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.0-1to-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.0-1to-0\",\"httpPortOpen\":false,\"ip\":\"69.2.4.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[1750000,330,330,0],\"CSEC\":[0,660,0,0],\"neo-net\":[0,0,330,330],\"the-hub\":[0,0,330,0],\"rothman-uni\":[0,0,330,0]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":29121.432237734705,\"onlineMoneyMade\":1750000,\"onlineRunningTime\":988.010000000068,\"pid\":28,\"ramUsage\":3.1,\"server\":\"v1.0.0-1to-0\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/f7181330-f5b9-4170-a961-82875ed4a371\",\"moduleSequenceNumber\":1386}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.0-1to-0\",\"moduleSequenceNumber\":1386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.1-1to-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.1-1to-0\",\"httpPortOpen\":false,\"ip\":\"8.9.9.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.1-1to-0\",\"moduleSequenceNumber\":1498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-0\",\"httpPortOpen\":false,\"ip\":\"99.7.0.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[1750000,330,0,330],\"CSEC\":[0,330,0,330],\"neo-net\":[0,0,660,0],\"the-hub\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20654.210412468507,\"onlineMoneyMade\":1750000,\"onlineRunningTime\":794.810000000024,\"pid\":31,\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-0\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/252341b7-bfa8-46e4-8839-db457d089dac\",\"moduleSequenceNumber\":1575}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-0\",\"moduleSequenceNumber\":1575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-1\",\"httpPortOpen\":false,\"ip\":\"90.5.3.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[0,330,0,330],\"CSEC\":[0,330,0,330],\"neo-net\":[0,0,660,0],\"the-hub\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19788.414585089515,\"onlineMoneyMade\":0,\"onlineRunningTime\":794.810000000024,\"pid\":32,\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-1\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/2ebf69f7-0ef9-4e6d-8e62-442b5c9c2e75\",\"moduleSequenceNumber\":1577}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-1\",\"moduleSequenceNumber\":1577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-0-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-0-0\",\"httpPortOpen\":false,\"ip\":\"46.3.5.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-1-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-1-0\",\"httpPortOpen\":false,\"ip\":\"58.9.6.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-2\",\"httpPortOpen\":false,\"ip\":\"64.2.0.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[0,0,330,330],\"CSEC\":[0,330,0,330],\"neo-net\":[0,0,660,0],\"the-hub\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20654.210412468507,\"onlineMoneyMade\":0,\"onlineRunningTime\":770.8100000000186,\"pid\":34,\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-2\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/884b0d03-4088-4f50-9e7b-2f487808161a\",\"moduleSequenceNumber\":1605}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-2\",\"moduleSequenceNumber\":1605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-3\",\"httpPortOpen\":false,\"ip\":\"40.4.9.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[0,0,330,330],\"CSEC\":[0,330,0,330],\"neo-net\":[0,0,660,0],\"the-hub\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20654.210412468507,\"onlineMoneyMade\":0,\"onlineRunningTime\":770.8100000000186,\"pid\":35,\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-3\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/06a242a2-10c2-4a9e-b34f-1e69e7188075\",\"moduleSequenceNumber\":1608}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-3\",\"moduleSequenceNumber\":1608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-4\",\"httpPortOpen\":false,\"ip\":\"77.9.3.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[0,0,330,330],\"CSEC\":[0,330,0,330],\"neo-net\":[0,0,660,0],\"the-hub\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20654.210412468507,\"onlineMoneyMade\":0,\"onlineRunningTime\":770.8100000000186,\"pid\":36,\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-4\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/2421bde9-7152-4bcc-8ca7-fd2b17f9b968\",\"moduleSequenceNumber\":1611}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-4\",\"moduleSequenceNumber\":1611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-5\",\"httpPortOpen\":false,\"ip\":\"30.9.3.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[0,0,330,330],\"CSEC\":[0,330,0,330],\"neo-net\":[0,0,660,0],\"the-hub\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20654.210412468507,\"onlineMoneyMade\":0,\"onlineRunningTime\":770.8100000000186,\"pid\":37,\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-5\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/98ef5ba9-3304-4278-baee-ea27ad576c25\",\"moduleSequenceNumber\":1614}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-5\",\"moduleSequenceNumber\":1614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-6\",\"httpPortOpen\":false,\"ip\":\"96.9.4.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[0,0,330,330],\"CSEC\":[0,330,0,330],\"neo-net\":[0,0,660,0],\"the-hub\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20654.210412468507,\"onlineMoneyMade\":0,\"onlineRunningTime\":770.8100000000186,\"pid\":38,\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-6\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/0be95b01-278d-43d0-bb20-dd150c5fe624\",\"moduleSequenceNumber\":1617}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-6\",\"moduleSequenceNumber\":1617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-7\",\"httpPortOpen\":false,\"ip\":\"41.9.2.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[0,0,330,330],\"CSEC\":[0,330,0,330],\"neo-net\":[0,0,660,0],\"the-hub\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20654.210412468507,\"onlineMoneyMade\":0,\"onlineRunningTime\":770.8100000000186,\"pid\":39,\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-7\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/e6f56beb-c03d-4777-a0b7-b7d97c6ea4e7\",\"moduleSequenceNumber\":1620}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-7\",\"moduleSequenceNumber\":1620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-8\",\"httpPortOpen\":false,\"ip\":\"58.2.2.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[0,0,330,330],\"CSEC\":[0,330,0,330],\"neo-net\":[0,0,660,0],\"the-hub\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20654.210412468507,\"onlineMoneyMade\":0,\"onlineRunningTime\":770.8100000000186,\"pid\":40,\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-8\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/f6caaefb-97f3-4dfc-867d-86ddcfc224bf\",\"moduleSequenceNumber\":1623}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-8\",\"moduleSequenceNumber\":1623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-9\",\"httpPortOpen\":false,\"ip\":\"47.9.8.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[0,0,330,330],\"CSEC\":[0,330,0,330],\"neo-net\":[0,0,660,0],\"the-hub\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20654.210412468507,\"onlineMoneyMade\":0,\"onlineRunningTime\":770.8100000000186,\"pid\":41,\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-9\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/435baed3-81f5-4bc4-9c0e-598db2f5a9c4\",\"moduleSequenceNumber\":1625}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-9\",\"moduleSequenceNumber\":1625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.3-1to-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.3-1to-0\",\"httpPortOpen\":false,\"ip\":\"93.1.3.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"n00dles\":[1750000,330,330,0],\"CSEC\":[0,330,0,330],\"neo-net\":[0,0,0,660],\"the-hub\":[0,0,0,330]},\"filename\":\"hackHome.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20654.210412468507,\"onlineMoneyMade\":1750000,\"onlineRunningTime\":724.810000000009,\"pid\":43,\"ramUsage\":3.1,\"server\":\"v1.0.3-1to-0\",\"threads\":330,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/b6287208-7f85-44a2-9f7a-9325c9198adf\",\"moduleSequenceNumber\":1731}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.3-1to-0\",\"moduleSequenceNumber\":1731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":24.3924,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.4841,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":55.8275,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":8836.72856484204}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":212.6797,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":156902.17282851815}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":184.9593,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":100308.06206575198}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":9068.710775295058}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":212.2394,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":32120.72031551414}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":34581.38737671865,\"lastPrice\":34595.28236474822,\"playerShares\":10,\"playerAvgPx\":23648.324026539507,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":false,\"otlkMag\":16.723013844120374,\"otlkMagForecast\":32.85582050068264,\"cap\":149940141,\"spreadPerc\":0.4,\"shareTxForMovement\":34804,\"shareTxUntilMovement\":34804,\"totalShares\":89200000,\"maxShares\":17800000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":10107.29298937338,\"lastPrice\":10111.181338703942,\"playerShares\":10,\"playerAvgPx\":24312.251829604218,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.45,\"b\":true,\"otlkMag\":19.616732466107287,\"otlkMagForecast\":70.37482526100594,\"cap\":487546266,\"spreadPerc\":0.1,\"shareTxForMovement\":33407,\"shareTxUntilMovement\":33407,\"totalShares\":92800000,\"maxShares\":18600000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":10837.03781289605,\"lastPrice\":10843.615706485964,\"playerShares\":10,\"playerAvgPx\":18995.707447192875,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":14.04762152088778,\"otlkMagForecast\":35.47237122603138,\"cap\":85293087,\"spreadPerc\":0.5,\"shareTxForMovement\":79330,\"shareTxUntilMovement\":79330,\"totalShares\":86300000,\"maxShares\":17300000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":14154.101390704094,\"lastPrice\":14161.966659425581,\"playerShares\":10,\"playerAvgPx\":22277.518550822722,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":12.157158984300366,\"otlkMagForecast\":38.444606927670726,\"cap\":265584521,\"spreadPerc\":0.4,\"shareTxForMovement\":58610,\"shareTxUntilMovement\":58610,\"totalShares\":63500000,\"maxShares\":12700000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":55254.39511539645,\"lastPrice\":55223.70794629931,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":10.71087233380455,\"otlkMagForecast\":60.87153596024589,\"cap\":845035546,\"spreadPerc\":0.1,\"shareTxForMovement\":65566,\"shareTxUntilMovement\":65566,\"totalShares\":49800000,\"maxShares\":10000000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":69737.32024488624,\"lastPrice\":69796.9390353916,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":true,\"otlkMag\":16.749370798321948,\"otlkMagForecast\":67.12107045573669,\"cap\":1194787918,\"spreadPerc\":1,\"shareTxForMovement\":41867,\"shareTxUntilMovement\":41867,\"totalShares\":36500000,\"maxShares\":7300000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":21494.103349267767,\"lastPrice\":21507.884913143967,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":9.52121842841194,\"otlkMagForecast\":59.38946397283427,\"cap\":340246606,\"spreadPerc\":0.2,\"shareTxForMovement\":50254,\"shareTxUntilMovement\":50254,\"totalShares\":81900000,\"maxShares\":16400000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":162472.91558330687,\"lastPrice\":162300.863307615,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":true,\"otlkMag\":15.474099950788,\"otlkMagForecast\":67.79268061619993,\"cap\":846373654,\"spreadPerc\":0.1,\"shareTxForMovement\":88798,\"shareTxUntilMovement\":88798,\"totalShares\":56400000,\"maxShares\":11300000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":102919.13229374538,\"lastPrice\":102994.80033178403,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.86,\"b\":true,\"otlkMag\":7.788661933647813,\"otlkMagForecast\":55.148865193456096,\"cap\":218480022,\"spreadPerc\":0.8,\"shareTxForMovement\":80346,\"shareTxUntilMovement\":80346,\"totalShares\":53600000,\"maxShares\":10700000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":7263.395923901143,\"lastPrice\":7267.742583837267,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":11.027213347445851,\"otlkMagForecast\":59.626330353749296,\"cap\":52213111,\"spreadPerc\":0.2,\"shareTxForMovement\":59990,\"shareTxUntilMovement\":59990,\"totalShares\":62600000,\"maxShares\":12500000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":8706.603662011708,\"lastPrice\":8702.06560346778,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":8.476463631366611,\"otlkMagForecast\":59.97169728360455,\"cap\":298819986,\"spreadPerc\":0.3,\"shareTxForMovement\":67764,\"shareTxUntilMovement\":67764,\"totalShares\":61600000,\"maxShares\":12300000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":19470.05929433169,\"lastPrice\":19457.91598410358,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":7.76147877538404,\"otlkMagForecast\":43.20172956683858,\"cap\":294176557,\"spreadPerc\":0.8,\"shareTxForMovement\":59962,\"shareTxUntilMovement\":59962,\"totalShares\":74100000,\"maxShares\":14800000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":26445.124097102816,\"lastPrice\":26460.271504922486,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":8.092664331918275,\"otlkMagForecast\":56.31004247867622,\"cap\":234671544,\"spreadPerc\":0.5,\"shareTxForMovement\":97546,\"shareTxUntilMovement\":97546,\"totalShares\":42700000,\"maxShares\":8500000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":29949.997466057866,\"lastPrice\":29964.84802123565,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":10.305058159634221,\"otlkMagForecast\":40.361239354226655,\"cap\":503700997,\"spreadPerc\":0.8,\"shareTxForMovement\":54623,\"shareTxUntilMovement\":54623,\"totalShares\":34400000,\"maxShares\":6900000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":4918.012374530502,\"lastPrice\":4920.703212190959,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":5.974957840981915,\"otlkMagForecast\":43.80010695816736,\"cap\":30735232,\"spreadPerc\":0.4,\"shareTxForMovement\":118129,\"shareTxUntilMovement\":118129,\"totalShares\":78200000,\"maxShares\":15600000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":7843.458065201666,\"lastPrice\":7848.285962039987,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":false,\"otlkMag\":5.768318112330803,\"otlkMagForecast\":44.29907495230417,\"cap\":196120086,\"spreadPerc\":0.4,\"shareTxForMovement\":62669,\"shareTxUntilMovement\":62669,\"totalShares\":51900000,\"maxShares\":10400000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":16498.569825223534,\"lastPrice\":16487.857204823802,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":9.586983573407458,\"otlkMagForecast\":59.91931158701395,\"cap\":194042114,\"spreadPerc\":1.2,\"shareTxForMovement\":119577,\"shareTxUntilMovement\":119577,\"totalShares\":31000000,\"maxShares\":6200000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":36952.57127206319,\"lastPrice\":36971.84174638765,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":9.003191896575647,\"otlkMagForecast\":41.406546523487926,\"cap\":609002383,\"spreadPerc\":1,\"shareTxForMovement\":46323,\"shareTxUntilMovement\":46323,\"totalShares\":25200000,\"maxShares\":5000000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":15369.837830325227,\"lastPrice\":15359.464431629718,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":5.442823841177476,\"otlkMagForecast\":56.34008911826991,\"cap\":346087318,\"spreadPerc\":1,\"shareTxForMovement\":118496,\"shareTxUntilMovement\":118496,\"totalShares\":23800000,\"maxShares\":4800000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":5413.706777527971,\"lastPrice\":5401.83836551233,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.57,\"b\":false,\"otlkMag\":7.899305063149753,\"otlkMagForecast\":44.58295246167853,\"cap\":65932801,\"spreadPerc\":0.6,\"shareTxForMovement\":46951,\"shareTxUntilMovement\":46951,\"totalShares\":67000000,\"maxShares\":13400000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":7385.388490265926,\"lastPrice\":7377.63066617477,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.23,\"b\":true,\"otlkMag\":6.590222301406755,\"otlkMagForecast\":57.029375542780265,\"cap\":39530053,\"spreadPerc\":0.5,\"shareTxForMovement\":66176,\"shareTxUntilMovement\":66176,\"totalShares\":38600000,\"maxShares\":7700000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":3971.042900430869,\"lastPrice\":3972.876127430789,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":true,\"otlkMag\":2.718761558147623,\"otlkMagForecast\":49.84348207426656,\"cap\":44703351,\"spreadPerc\":0.8,\"shareTxForMovement\":70879,\"shareTxUntilMovement\":70879,\"totalShares\":43600000,\"maxShares\":8700000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":2557.816474889461,\"lastPrice\":2553.930080130633,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.78,\"b\":true,\"otlkMag\":6.117451158768535,\"otlkMagForecast\":56.234562260762424,\"cap\":160145617,\"spreadPerc\":1,\"shareTxForMovement\":50923,\"shareTxUntilMovement\":50923,\"totalShares\":33400000,\"maxShares\":6700000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":2042.9983203789925,\"lastPrice\":2045.740434771218,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.57,\"b\":false,\"otlkMag\":7.911791868818608,\"otlkMagForecast\":41.84406555529624,\"cap\":54368591,\"spreadPerc\":0.8,\"shareTxForMovement\":15282,\"shareTxUntilMovement\":15282,\"totalShares\":35300000,\"maxShares\":7100000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":5357.6342592179035,\"lastPrice\":5353.698121940898,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.86,\"b\":true,\"otlkMag\":5.147310367530794,\"otlkMagForecast\":55.08888044046632,\"cap\":49204517,\"spreadPerc\":1,\"shareTxForMovement\":81187,\"shareTxUntilMovement\":81187,\"totalShares\":59900000,\"maxShares\":12000000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":644.5594459345144,\"lastPrice\":643.1189550726806,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.62,\"b\":false,\"otlkMag\":5.812958939604967,\"otlkMagForecast\":47.77361657400182,\"cap\":29904537,\"spreadPerc\":1.8,\"shareTxForMovement\":19154,\"shareTxUntilMovement\":19154,\"totalShares\":13500000,\"maxShares\":2700000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":10315.982305908929,\"lastPrice\":10306.466371229171,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.08,\"b\":false,\"otlkMag\":5.169576573965199,\"otlkMagForecast\":48.37859357245898,\"cap\":37133471,\"spreadPerc\":0.9,\"shareTxForMovement\":79809,\"shareTxUntilMovement\":79809,\"totalShares\":11700000,\"maxShares\":2300000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1970.9875000033849,\"lastPrice\":1969.7750410836077,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":5.837276766686036,\"otlkMagForecast\":56.71049653451788,\"cap\":15759673,\"spreadPerc\":1,\"shareTxForMovement\":107130,\"shareTxUntilMovement\":107130,\"totalShares\":13400000,\"maxShares\":2700000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":1394.7079001901227,\"lastPrice\":1392.6006419361684,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.77,\"b\":true,\"otlkMag\":5.414963013368621,\"otlkMagForecast\":55.26958957262399,\"cap\":35035223,\"spreadPerc\":1.2,\"shareTxForMovement\":29710,\"shareTxUntilMovement\":29710,\"totalShares\":14700000,\"maxShares\":2900000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":1510.860236726629,\"lastPrice\":1515.0451571848378,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.24,\"b\":true,\"otlkMag\":5.299716224670527,\"otlkMagForecast\":52.10901182202621,\"cap\":10013409,\"spreadPerc\":0.7,\"shareTxForMovement\":24135,\"shareTxUntilMovement\":24135,\"totalShares\":62100000,\"maxShares\":12400000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":112.8297968299974,\"lastPrice\":112.68625610853663,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.49,\"b\":true,\"otlkMag\":14.159257909344621,\"otlkMagForecast\":60.81899535454548,\"cap\":862603,\"spreadPerc\":1.1,\"shareTxForMovement\":43586,\"shareTxUntilMovement\":43586,\"totalShares\":336700000,\"maxShares\":67300000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":46705.039101810675,\"lastPrice\":46734.58610002717,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":8.818614648156423,\"otlkMagForecast\":42.51725803915363,\"cap\":365303279,\"spreadPerc\":0.3,\"shareTxForMovement\":135123,\"shareTxUntilMovement\":135123,\"totalShares\":12500000,\"maxShares\":2500000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":20758.659978217576,\"lastPrice\":20767.71078716742,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.51,\"b\":false,\"otlkMag\":11.698308644869192,\"otlkMagForecast\":38.38528735947901,\"cap\":104965773,\"spreadPerc\":1,\"shareTxForMovement\":144606,\"shareTxUntilMovement\":144606,\"totalShares\":20400000,\"maxShares\":4100000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":410838,\"lastUpdate\":1644419248118,\"ticksUntilCycle\":41}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-15,\"y\":5,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1644391639886","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644419248255"}}