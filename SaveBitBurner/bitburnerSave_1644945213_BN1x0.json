{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":620,\"hp\":32,\"max_hp\":32,\"strength\":226,\"defense\":226,\"dexterity\":313,\"agility\":237,\"charisma\":182,\"intelligence\":0,\"hacking_chance_mult\":1.556765497209507,\"hacking_speed_mult\":1.4588147825763038,\"hacking_money_mult\":1.3478489153329063,\"hacking_grow_mult\":1.3478489153329063,\"hacking_exp\":102445730.3566002,\"strength_exp\":97200.34557645342,\"defense_exp\":97200.34557645342,\"dexterity_exp\":97200.34557645342,\"agility_exp\":97200.34557645342,\"charisma_exp\":17082.788112007867,\"intelligence_exp\":0,\"hacking_mult\":1.5900236691953464,\"strength_mult\":1.3478489153329063,\"defense_mult\":1.3478489153329063,\"dexterity_mult\":1.8681185966514082,\"agility_mult\":1.4152413610995516,\"charisma_mult\":1.6174186983994876,\"hacking_exp_mult\":1.660549863690141,\"strength_exp_mult\":1.4826338068661973,\"defense_exp_mult\":1.4826338068661973,\"dexterity_exp_mult\":1.4826338068661973,\"agility_exp_mult\":1.4826338068661973,\"charisma_exp_mult\":1.4826338068661973,\"company_rep_mult\":1.3478489153329063,\"faction_rep_mult\":1.3478489153329063,\"money\":446349384364.995,\"city\":\"Aevum\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"1go-1\",\"1go-2\",\"1go-3\",\"1go-4\",\"1to-1\",\"1to-2\",\"1to-3\",\"1to-4\",\"1to-5\",\"auto-1to-0\",\"v1.0.0-1to-0\",\"v1.0.1-1to-0\",\"v1.0.2-1to-0\",\"v1.0.2-1to-1\",\"v1.0.2-1to-0-0\",\"v1.0.2-1to-1-0\",\"v1.0.2-1to-2\",\"v1.0.2-1to-3\",\"v1.0.2-1to-4\",\"v1.0.2-1to-5\",\"v1.0.2-1to-6\",\"v1.0.2-1to-7\",\"v1.0.2-1to-8\",\"v1.0.2-1to-9\",\"v1.0.3-1to-0\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":625566.9999986683,\"ram\":64,\"totalMoneyGenerated\":19099497310.58765,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":625566.7999986684,\"ram\":64,\"totalMoneyGenerated\":19098362589.07165,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":625563.9999986683,\"ram\":64,\"totalMoneyGenerated\":19097145611.56648,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":625555.1999986683,\"ram\":64,\"totalMoneyGenerated\":19095897223.684544,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":625470.9999986679,\"ram\":64,\"totalMoneyGenerated\":19094601619.273335,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":625217.3999986667,\"ram\":64,\"totalMoneyGenerated\":19093325827.10576,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":624876.799998665,\"ram\":64,\"totalMoneyGenerated\":19091952775.11211,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":624564.3999986636,\"ram\":64,\"totalMoneyGenerated\":19090611387.21027,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":624320.7999986624,\"ram\":64,\"totalMoneyGenerated\":19089358460.473316,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":623827.7999986601,\"ram\":64,\"totalMoneyGenerated\":19087967843.23338,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":620965.3999986596,\"ram\":64,\"totalMoneyGenerated\":18999826780.441505,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":620690.7999986599,\"ram\":64,\"totalMoneyGenerated\":18998634724.65035,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":619376.799998661,\"ram\":64,\"totalMoneyGenerated\":18995747624.981102,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":617689.9999986602,\"ram\":64,\"totalMoneyGenerated\":18990397638.26083,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":616129.5999986534,\"ram\":64,\"totalMoneyGenerated\":18977782371.617035,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":615231.1999986517,\"ram\":64,\"totalMoneyGenerated\":18961391584.279617,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":614394.5999986518,\"ram\":64,\"totalMoneyGenerated\":18943592764.111305,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":614201.5999986518,\"ram\":64,\"totalMoneyGenerated\":18938527198.140835,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":613977.5999986518,\"ram\":64,\"totalMoneyGenerated\":18932412251.407555,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":613150.5999986518,\"ram\":64,\"totalMoneyGenerated\":18911748989.149296,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":611997.5999986519,\"ram\":64,\"totalMoneyGenerated\":18884004032.76525,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":608890.199999116,\"ram\":64,\"totalMoneyGenerated\":18795821026.657925,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":550157.2000003937,\"ram\":64,\"totalMoneyGenerated\":17147105321.634214,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":549927.4000003936,\"ram\":64,\"totalMoneyGenerated\":17140334456.338295,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":549738.2000003937,\"ram\":64,\"totalMoneyGenerated\":17124550490.86595,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":549239.6000003936,\"ram\":64,\"totalMoneyGenerated\":17117697036.479347,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":549022.6000003936,\"ram\":64,\"totalMoneyGenerated\":17109989912.397642,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":548773.8000003935,\"ram\":64,\"totalMoneyGenerated\":17104440518.034893,\"name\":\"hacknet-node-27\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":544308.6000003845,\"ram\":64,\"totalMoneyGenerated\":16906656555.183758,\"name\":\"hacknet-node-28\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31176.960692345743,\"onlineTimeSeconds\":415932.4000003683,\"ram\":64,\"totalMoneyGenerated\":12963251692.507023,\"name\":\"hacknet-node-29\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"Sector-12\",\"CyberSec\",\"Aevum\",\"Tian Di Hui\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"PCMatrix\"}],\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":30,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.3478489153329063,\"crime_success_mult\":1.3478489153329063,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.3478489153329063,\"hacknet_node_money_mult\":3.3994013253054023,\"hacknet_node_purchase_cost_mult\":0.5658707856420343,\"hacknet_node_ram_cost_mult\":0.7397003733882802,\"hacknet_node_core_cost_mult\":0.7397003733882802,\"hacknet_node_level_cost_mult\":0.6287453173800381,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1644945213107,\"totalPlaytime\":3123907000,\"playtimeSinceLastAug\":635786400,\"playtimeSinceLastBitnode\":3123907000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":84744967906.01085,\"hacknet\":550882633627.849,\"hacknet_expenses\":-77910611326.3701,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-1791845.1573645198,\"total\":446348384364.995,\"work\":0,\"servers\":-1408000000,\"other\":-306800000,\"augmentations\":-109652013999.99997}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-47017920,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":137267075892.98909,\"hacknet\":2196216835785.266,\"hacknet_expenses\":-1058277765982.1886,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-36843644264.353905,\"total\":798110688957.4204,\"work\":9039456.854541358,\"servers\":-10495528016.595041,\"other\":-308000000,\"augmentations\":-429410306180.44885}},\"scriptProdSinceLastAug\":46873459186.92183,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1641821373263},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641916555235},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641933740578},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641973495578},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641982477832},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642005851849},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642067315302},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642068324076},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1642152452688},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642686556593},{\"ID\":\"TOR\",\"unlockedOn\":1642686796601},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1642757053593},{\"ID\":\"4S\",\"unlockedOn\":1643193189309},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1643383422775},{\"ID\":\"TRAVEL\",\"unlockedOn\":1643395169421},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1643821617662},{\"ID\":\"DONATION\",\"unlockedOn\":1644309473098},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1644397741752},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1644397741788}],\"factionWorkType\":\"Faction Security Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"37.1.5.8\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"FTPCrack.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"relaySMTP.exe\",\"DeepscanV2.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tmyPrint(ns, 'START ma super fonction');\\n\\tlet hostName = ns.getHostname();\\n\\tlet scan = ns.scan();\\n\\n\\tmyPrint(ns, hostName);\\n\\tmyPrint(ns, scan);\\n\\n\\twhile(true) {\\n\\t\\tfor(let i = 0; i < scan.length; i++) {\\n\\t\\t\\tlet serverToHack = scan[i];\\n\\t\\t\\tmyPrint(ns, serverToHack);\\n\\t\\t\\tawait myHack(ns, serverToHack);\\n\\t\\t}\\n\\n\\t\\tlet hackingLevel = ns.getHackingLevel();\\n\\t\\tmyPrint(ns, hackingLevel);\\n\\n\\t\\tmyPrint(ns, 'END ma super fonction');\\n\\t}\\n}\\n\\nexport function myPrint(ns, toPrint) {\\n\\t// ns.tprint(toPrint);\\n}\\n\\nexport async function myHack(ns, serveur) {\\n\\tvar target = serveur;\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\tmyPrint(ns, 'weaken');\\n        await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\tmyPrint(ns, 'grow');\\n        await ns.grow(target);\\n    } else {\\n\\t\\tmyPrint(ns, 'hack');\\n        await ns.hack(target);\\n\\t\\tns.run('Nuke.exe');\\n    }\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:https://danielyxie.github.io/18400b9f-28b9-456b-9cb1-b60a86736662\"}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home\",\"moduleSequenceNumber\":34,\"_hash\":\"7d05a8cedf00316fe4cc398da9f2b78c4eed5648030dfb355188b6e9b606570c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//foo.js\\nlet globalVariable;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    globalVariable = ns.args.length;\\n    while(true) {\\n        ns.tprint(globalVariable);\\n        await ns.sleep(3000);\\n    }\\n}\",\"filename\":\"foo.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"foo.js\",\"url\":\"blob:https://danielyxie.github.io/0f719eb6-3dc2-4806-b0dd-90c38672c3a8\"}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":35,\"_hash\":\"ed911c27bd6ea9b2aabebcf2a8e4f9895308fd4ffde79d84cfaa7e1b1afc9b65\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import * as namespace from \\\"script filename\\\"; //Import all functions from script\\n// import {fn1, fn2, ...} from \\\"script filename\\\"; //Import specific functions from script\\n\\nimport * as fileName from \\\"fileName.js\\\";\\n\\nlet globalNs;\\nlet argsZero;\\n\\n\\nexport function myPrint(toPrint) {\\n\\tglobalNs.tprint(toPrint);\\n}\\n\\nexport async function main(ns) {\\n\\n\\tglobalNs = ns;\\n\\targsZero = ns.args[0];\\n\\n\\tmyPrint('The START on ' + argsZero);\\n\\tlet earlyHackFileName = fileName.getEarlyHackFileName();\\n\\tlet hackFileName = fileName.getHackFileName();\\n\\n\\tmyPrint('The START on ' + argsZero);\\n\\tmyPrint('The START on ' + argsZero);\\n\\n\\tlet hostName = globalNs.getHostname();\\n\\tlet scans = globalNs.scan();\\n\\tlet isFileExist = false;\\n\\n\\n\\tthis.toPrint\\n\\tmyPrint(hostName);\\n\\tmyPrint(scans);\\n\\n\\tfor (let i = 0; i < scans.length; i++) {\\n\\t\\tlet serverToHack = scans[i];\\n\\t\\tmyPrint(serverToHack);\\n\\t\\tisFileExist = globalNs.fileExists(hackFileName, serverToHack);\\n\\t\\tif (isFileExist) {\\n\\t\\t\\tmyPrint('File exist -> ' + hackFileName);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tmyPrint('File doesn\\\\'t exist -> ' + hackFileName);\\n\\t\\tlet securityLevel = globalNs.getServerSecurityLevel(serverToHack);\\n\\t\\tmyPrint('securityLevel : ' + securityLevel);\\n\\n\\t\\t// scp();\\n\\n\\n\\t\\t/*\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(serverToHack);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(serverToHack);\\n\\t\\t\\t\\t}\\n\\t\\t*/\\n\\n\\t\\t/*\\n\\t\\t\\t\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\t\\t\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(target);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.nuke(target);\\n\\t\\t\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\t\\t\\tmyPrint(ns, 'weaken');\\n\\t\\t\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\t\\t\\tmyPrint(ns, 'grow');\\n\\t\\t\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tmyPrint(ns, 'hack');\\n\\t\\t\\t\\t\\tawait ns.hack(target);\\n\\t\\t\\t\\t\\tns.run('Nuke.exe');\\n\\t\\t\\t\\t}\\n\\t\\t*/\\n\\t}\\n\\n\\n\\tmyPrint('The END on ' + argsZero);\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"fileName.js\",\"url\":\"blob:https://danielyxie.github.io/a803d115-f870-4e5c-8db2-b9b19bf69160\",\"moduleSequenceNumber\":516},{\"filename\":\"early-hack-template.js\",\"url\":\"blob:https://danielyxie.github.io/90b40963-7a2b-411e-8a51-b1140ab15f78\",\"moduleSequenceNumber\":578}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"home\",\"moduleSequenceNumber\":36,\"_hash\":\"9d0e7463aa9d355fca61279d782a9c65a77e9ba4a76fc391dc5dbed6e44bd4e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function myMoney() {\\n    return getServerMoneyAvailable(\\\"home\\\");\\n}\\n\\nvar cnt = 10;\\n\\nwhile(hacknet.numNodes() < cnt) {\\n    res = hacknet.purchaseNode();\\n    print(\\\"Purchased hacknet Node with index \\\" + res);\\n};\\n\\nfor (var i = 0; i < cnt; i++) {\\n    while (hacknet.getNodeStats(i).level < 89) {\\n        var cost = hacknet.getLevelUpgradeCost(i, 1);\\n        while (myMoney() < cost) {\\n            print(\\\"Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n            sleep(3000);\\n        }\\n        res = hacknet.upgradeLevel(i, 10);\\n    };\\n};\\n\\nprint(\\\"All nodes upgraded to level 80\\\");\\n\\nfor (var i = 0; i < cnt; i++) {\\n    while (hacknet.getNodeStats(i).ram < 16) {\\n        var cost = hacknet.getRamUpgradeCost(i, 2);\\n        while (myMoney() < cost) {\\n            print(\\\"Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n            sleep(3000);\\n        }\\n        res = hacknet.upgradeRam(i, 2);\\n    };\\n};\\n\\nprint(\\\"All nodes upgraded to 16GB RAM\\\");\\n\\nfor (var i = 0; i < cnt; i++) {\\n    while (hacknet.getNodeStats(i).cores < 8) {\\n        var cost = hacknet.getCoreUpgradeCost(i, 1);\\n        while (myMoney() < cost) {\\n            print(\\\"Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n            sleep(3000);\\n        }\\n        res = hacknet.upgradeCore(i, 1);\\n    };\\n};\\n\\nprint(\\\"All nodes upgraded to 8 cores\\\");\",\"filename\":\"purchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"purchase.js\",\"url\":\"blob:https://danielyxie.github.io/e84110c8-789c-4d66-88de-4d22ddd33b87\"}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":37,\"_hash\":\"7942ce07cbbeb3a7503b1bcb96d3d45e954f54fd1725b31f150bafb15d924804\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function myMoney() {\\n    return getServerMoneyAvailable(\\\"home\\\");\\n}\\n\\nfunction isAllSameThanFirst() {\\n    var cnt = hacknet.numNodes();\\n    var nodeStats = hacknet.getNodeStats(0);\\n    var level = nodeStats.level;\\n    var ram = nodeStats.ram;\\n    var cores = nodeStats.cores;\\n\\n    for (var i = 1; i < cnt; i++) {\\n        var nodeStatsOthers = hacknet.getNodeStats(i);\\n        var levelOther = nodeStatsOthers.level;\\n        var ramOther = nodeStatsOthers.ram;\\n        var coresOther = nodeStatsOthers.cores;\\n        if (level != levelOther || ram != ramOther || cores != coresOther) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n\\nfunction mySleep()\\n{\\n    sleep(10000);\\n}\\n\\nfunction upgrade() {\\n    var cnt = hacknet.numNodes();\\n    for (var i = 0; i < cnt; i++) {\\n        while (hacknet.getNodeStats(i).level < level) {\\n            var cost = hacknet.getLevelUpgradeCost(i, 1);\\n            while (myMoney() < cost) {\\n                print(\\\"Lvl Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n                sleepTimeToCost(cost);\\n            }\\n            res = hacknet.upgradeLevel(i, 1);\\n        };\\n        while (hacknet.getNodeStats(i).ram < ram) {\\n            var cost = hacknet.getRamUpgradeCost(i, 1);\\n            while (myMoney() < cost) {\\n                print(\\\"RAM Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n                sleepTimeToCost(cost);\\n            }\\n            res = hacknet.upgradeRam(i, 1);\\n        };\\n        while (hacknet.getNodeStats(i).cores < cores) {\\n            var cost = hacknet.getCoreUpgradeCost(i, 1);\\n            while (myMoney() < cost) {\\n                print(\\\"CORE Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n                sleepTimeToCost(cost);\\n            }\\n            res = hacknet.upgradeCore(i, 1);\\n        };\\n    };\\n}\\n\\nfunction sleepTimeToCost(cost)\\n{\\n    var money = myMoney();\\n    sleep(1000);\\n    var moneyPlusOneSecond = myMoney();\\n    hacknetLastTOCost = cost - moneyPlusOneSecond;\\n\\n    var moneyPerSeconde = moneyPlusOneSecond - money;\\n    var timeSleep = hacknetLastTOCost / moneyPerSeconde * 1000;\\n    print(\\\"Money per second: \\\" + moneyPerSeconde);\\n    print(\\\"Time before purchase : \\\" + timeSleep);\\n    sleep(timeSleep);\\n}\\n\\ndisableLog(\\\"getServerMoneyAvailable\\\");\\ndisableLog(\\\"sleep\\\");\\n\\nif (hacknet.numNodes() == 0) {\\n    hacknet.purchaseNode();\\n    hacknet.purchaseNode();\\n}\\n\\nvar cnt = 2;\\nvar level = 10;\\nvar ram = 1;\\nvar cores = 1;\\nwhile (true) {\\n    var cnt = hacknet.numNodes();\\n    var level = hacknet.getNodeStats(0).level;\\n    var ram = hacknet.getNodeStats(0).ram;\\n    var cores = hacknet.getNodeStats(0).cores;\\n    var levelCost = hacknet.getLevelUpgradeCost(0, 1);\\n    var tenLevelCost = hacknet.getLevelUpgradeCost(0, 10);\\n    var ramCost = hacknet.getRamUpgradeCost(0, 1);\\n    var coresCost = hacknet.getCoreUpgradeCost(0, 1)\\n    var hacknetCost = hacknet.getPurchaseNodeCost();\\n\\n    if (isAllSameThanFirst()) {\\n        if ((hacknetCost < coresCost * 5 && hacknetCost < tenLevelCost) || cores == 16) {\\n            cnt++;\\n            while (hacknet.numNodes() < cnt) {\\n                res = hacknet.purchaseNode();\\n                print(\\\"Purchased hacknet Node with index \\\" + res);\\n                // TODO faire une fonction qui calcule le temps de sleep + 1s\\n                sleepTimeToCost(hacknetCost)\\n            };\\n        } else {\\n            if (tenLevelCost < coresCost && level < 200) {\\n                level = level + 10;\\n                if (level > 200) {\\n                    level = 200;\\n                }\\n            }\\n            if (ramCost < coresCost && ram < 64) {\\n                ram = ram * 2;\\n            } else if (coresCost < hacknetCost && cores < 16) {\\n                cores++;\\n            }\\n        }\\n    }\\n\\n    print(\\\"init cnt : \\\" + cnt);\\n    print(\\\"init level : \\\" + level);\\n    print(\\\"init ram : \\\" + ram);\\n    print(\\\"init cores : \\\" + cores);\\n\\n    upgrade();\\n\\n    print(\\\"All nodes upgraded to level \\\" + level);\\n    print(\\\"All nodes upgraded to \\\" + ram + \\\"GB RAM\\\");\\n    print(\\\"All nodes upgraded to \\\" + cores + \\\" cores\\\");\\n}\",\"filename\":\"purchase.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":38,\"_hash\":\"d953de1813c1d1ecf118bfa188e9a0162a7e62bd4541913157502952df6c0698\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n    print('testOut');\\n\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"saveEarly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":39,\"_hash\":\"b16cd74d13a5942555f8b92a9c006357f83ef28391a36cabd084770cc2851466\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/de037392-d1ab-41ee-922c-924fe58596bf\",\"moduleSequenceNumber\":33}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":40,\"_hash\":\"b7748eba220c8a43854fbcc23649b0dd6b0b2d18f5ac867e0f1aac9f798430e3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getEarlyHackFileName() \\n{\\n    return 'early-hack-template.js';\\n}\\n\\nexport function getHackFileName()\\n{\\n    return 'hack.js';\\n}\",\"filename\":\"fileName.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":41,\"_hash\":\"b73141400da60b800c4a9796aaf9fc4cc3cde3d3c0e02632b7969cbcaadd1110\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/798a3cc1-6036-4738-a5f8-d455154cc9bf\",\"moduleSequenceNumber\":67}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":42,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet home;\\nlet fileNameToCopyAndRun;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    globalNs = ns;\\n    home = \\\"home\\\";\\n    fileNameToCopyAndRun = 'hackHome.js';\\n    let nbServerToBuy = 25;\\n\\n    myPrint(globalNs);\\n    myPrint(home);\\n\\n    let myMoney = ns.getServerMoneyAvailable(home);\\n    myPrint(myMoney);\\n\\n    for (let i = 0; i < nbServerToBuy; i++) {\\n        let serverNameToBuy = '1to-' + i;\\n        myPrint('serveur Name to buy : ' + serverNameToBuy);\\n\\n        ns.purchaseServer(serverNameToBuy, 1024);\\n        await ns.scp(fileNameToCopyAndRun, home, serverNameToBuy);\\n        ns.exec(fileNameToCopyAndRun, serverNameToBuy, 330, home);\\n\\n        myPrint('BUY COPY and RUN OK');\\n    }\\n    \\n    myPrint('All serveur BUY !!!');\\n    \\n    // purchaseServer(hostname, ram);\\n    // run(script, numThreads, args);\\n\\n// purchaseServeurHackAndRunIt.js: \\n// {\\\"gang\\\":{},\\\"bladeburner\\\":{},\\\"codingcontract\\\":{},\\\"sleeve\\\":{},\\\"corporation\\\":{},\\\"stanek\\\":{},\\n// \\\"ui\\\":{},\\\"formulas\\\":{\\\"skills\\\":{},\\\"hacking\\\":{},\\\"hacknetNodes\\\":{},\\\"hacknetServers\\\":{},\\n// \\\"gang\\\":{}},\\\"stock\\\":{},\\\"args\\\":[\\\"home\\\"],\\\"hacknet\\\":{},\\\"heart\\\":{}}\\n// purchaseServeurHackAndRunIt.js: home\\n}\",\"filename\":\"purchaseServeurHackAndRunIt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"purchaseServeurHackAndRunIt.js\",\"url\":\"blob:https://danielyxie.github.io/a28f4559-3951-4e9c-ae67-a687bddd45f5\",\"moduleSequenceNumber\":1972}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"home\",\"moduleSequenceNumber\":43,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"1go-1\",\"1go-2\",\"1go-3\",\"1go-4\",\"darkweb\",\"1to-1\",\"1to-2\",\"1to-3\",\"1to-4\",\"1to-5\",\"auto-1to-0\",\"v1.0.0-1to-0\",\"v1.0.1-1to-0\",\"v1.0.2-1to-0\",\"v1.0.2-1to-1\",\"v1.0.2-1to-0-0\",\"v1.0.2-1to-1-0\",\"v1.0.2-1to-2\",\"v1.0.2-1to-3\",\"v1.0.2-1to-4\",\"v1.0.2-1to-5\",\"v1.0.2-1to-6\",\"v1.0.2-1to-7\",\"v1.0.2-1to-8\",\"v1.0.2-1to-9\",\"v1.0.3-1to-0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":2.009750000000002,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"50.1.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":56445890396,\"moneyMax\":1411147259900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1053,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"39.1.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":56885383762,\"moneyMax\":1422134594050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1253,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"14.1.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":18910010271,\"moneyMax\":472750256775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1072,\"serverGrowth\":64}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"32.0.7.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":36192767288,\"moneyMax\":904819182200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":932,\"serverGrowth\":64}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"47.8.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":29574015244,\"moneyMax\":739350381100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1209,\"serverGrowth\":76}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"49.4.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":17465981109,\"moneyMax\":436649527725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1060,\"serverGrowth\":64}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"21.9.5.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":20364091332,\"moneyMax\":509102283300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":951,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"89.7.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":19942118472,\"moneyMax\":498552961800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1019,\"serverGrowth\":89}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"58.5.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":21638715959,\"moneyMax\":540967898975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1059,\"serverGrowth\":97}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-755939.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,1,0,1,0,0,0,0,1],[0,0,0,0,1,1,0,0,0,0,0],[1,0,1,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"53.8.0.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1786995306,\"moneyMax\":44674882650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1226,\"serverGrowth\":86}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"14.1.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1266,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-820865.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-6,3,-8,8,9,1,-6,-7,-3,-6,-5,-10,4,9,1,-1,3,3,1,6,6,2,-10,0,10],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"76.2.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1058218644,\"moneyMax\":26455466100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":961,\"serverGrowth\":85}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"73.9.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":942194479,\"moneyMax\":23554861975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":998,\"serverGrowth\":61}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"41.4.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":804863927,\"moneyMax\":20121598175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":919,\"serverGrowth\":43}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"19.8.4.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":627081349,\"moneyMax\":15677033725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":810,\"serverGrowth\":70}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"90.8.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":784606313,\"moneyMax\":19615157825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":781,\"serverGrowth\":65}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"66.8.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":943527612,\"moneyMax\":23588190300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":904,\"serverGrowth\":94}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"50.3.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1199356328,\"moneyMax\":29983908200,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":814,\"serverGrowth\":87}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-337003.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[139,4,68,75,140,184,149,157,138,85,185,99,110,17,1],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"51.1.6.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":785855065,\"moneyMax\":19646376625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":79}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"24.3.1.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":521042301,\"moneyMax\":13026057525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":85}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"30.7.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":865084252,\"moneyMax\":21627106300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":940,\"serverGrowth\":75}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"20.5.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":760157228,\"moneyMax\":19003930700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":848,\"serverGrowth\":87}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"72.7.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1086871839,\"moneyMax\":27171795975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":914,\"serverGrowth\":58}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"54.3.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":961480545,\"moneyMax\":24037013625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":941,\"serverGrowth\":62}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"76.6.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":1055708288,\"moneyMax\":26392707200,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":75}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"21.7.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":868376567,\"moneyMax\":21709414175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"49.4.3.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":839745519,\"moneyMax\":20993637975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":763,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"39.4.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1396805545,\"moneyMax\":34920138625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":890,\"serverGrowth\":67}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"3.3.7.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"omnia\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1734699434,\"moneyMax\":43367485850,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":813,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"17.7.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1201600578,\"moneyMax\":30040014450,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":844,\"serverGrowth\":66}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"48.8.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1342356135,\"moneyMax\":33558903375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":831,\"serverGrowth\":71}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"63.6.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1038089828,\"moneyMax\":25952245700,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":814,\"serverGrowth\":80}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"25.9.3.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":790458598,\"moneyMax\":19761464950,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":700,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-109477.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,12],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"37.2.1.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":36.408,\"minDifficulty\":18,\"moneyAvailable\":13474523050,\"moneyMax\":13474523050,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":520,\"serverGrowth\":44}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"98.3.6.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":722455178,\"moneyMax\":18061379450,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":582,\"serverGrowth\":60}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-599398-Aevum.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,2,0,7,3,9,0,1,6,10,1,2,3],\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"47.0.2.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":389197436,\"moneyMax\":9729935900,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":428,\"serverGrowth\":41}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"87.5.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":209615,\"moneyMax\":4387882600,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":397,\"serverGrowth\":43}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"9.5.6.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":891984104,\"moneyMax\":22299602600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":729,\"serverGrowth\":82}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"8.4.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":19,\"minDifficulty\":19,\"moneyAvailable\":2769105,\"moneyMax\":5223753225,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":455,\"serverGrowth\":47}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"63.6.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":519583232,\"moneyMax\":12989580800,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":608,\"serverGrowth\":68}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"60.5.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":513197672,\"moneyMax\":12829941800,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":429,\"serverGrowth\":41}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"58.1.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":12,\"minDifficulty\":12,\"moneyAvailable\":896804.5750515113,\"moneyMax\":3779633850,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":312,\"serverGrowth\":51}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"33.9.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":31.220000000000002,\"minDifficulty\":20,\"moneyAvailable\":11135,\"moneyMax\":5581925825,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":380,\"serverGrowth\":55}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"39.1.4.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":31.984,\"minDifficulty\":20,\"moneyAvailable\":6875000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":424,\"serverGrowth\":66}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"9.6.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":405254407.21805596,\"moneyMax\":1914486400,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":260,\"serverGrowth\":52}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"35.7.3.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"91.0.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":12912840.419714542,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"24.5.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":57500000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"74.5.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"71.7.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"60.4.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"48.6.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"comptek\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":37.540000000000006,\"minDifficulty\":8,\"moneyAvailable\":4323768.143151037,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"21.5.3.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"84.6.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-155053.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)(a))a)a()\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"38.3.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-895012-Sector-12.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,0,5,4,4,0,0,0,0,2,9,5,7,0],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"7.7.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"65.7.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-725457.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":596649485,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-599571.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,1,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"97.9.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":9,\"minDifficulty\":9,\"moneyAvailable\":1635547650,\"moneyMax\":1635547650,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":185,\"serverGrowth\":33}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"10.6.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":124575203.33294542,\"moneyMax\":1117030475,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":261,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"56.7.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"20.0.3.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":25.490000000000002,\"minDifficulty\":16,\"moneyAvailable\":25220655,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":486,\"serverGrowth\":30}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-168834-Sector-12.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,1,0,0,0,1],[0,0,0,0,0,0,0,1,1,0],[0,1,0,1,0,1,1,0,0,0],[0,0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0],[0,1,0,0,0,0,1,0,0,0]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"23.6.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1028,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"0.6.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":759,\"serverGrowth\":49}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-489325.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,1,0],[0,1,0,0,0,0,1,0],[0,1,0,0,0,0,1,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-688195.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,0,10,0,2,0,0,1,4,3,7,1,1,3,0,2,3,2,10],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"78.7.5.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":525,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-42955-Sector-12.cct\",\"type\":\"Total Ways to Sum\",\"data\":36,\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"32.8.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":15.110000000000003,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":343,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"75.5.0.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":17.47,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":208,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"63.1.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":506,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"56.4.5.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"n00dles\",\"neo-net\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":52,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"32.3.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"1.9.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"1go-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"1go-1\",\"httpPortOpen\":false,\"ip\":\"55.7.3.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/5c05fcbc-d830-433f-a09b-9e237094019f\",\"moduleSequenceNumber\":68}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"1go-1\",\"moduleSequenceNumber\":44,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"1go-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"1go-2\",\"httpPortOpen\":false,\"ip\":\"30.5.6.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/903dbd41-43cb-401b-908e-f3704a9b63e1\",\"moduleSequenceNumber\":69}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"1go-2\",\"moduleSequenceNumber\":45,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"1go-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"1go-3\",\"httpPortOpen\":false,\"ip\":\"8.3.1.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/63791099-6c9a-480b-be40-0710c6ecc5da\",\"moduleSequenceNumber\":70}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"1go-3\",\"moduleSequenceNumber\":46,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"1go-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"1go-4\",\"httpPortOpen\":false,\"ip\":\"93.9.8.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/5f92f19a-61b7-44fc-85be-ab6776734268\",\"moduleSequenceNumber\":71}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"1go-4\",\"moduleSequenceNumber\":47,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"75.8.9.9\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"1to-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"1to-1\",\"httpPortOpen\":false,\"ip\":\"71.6.0.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/da458b92-d650-455a-a569-205133a265fa\",\"moduleSequenceNumber\":72}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"1to-1\",\"moduleSequenceNumber\":48,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"1to-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"1to-2\",\"httpPortOpen\":false,\"ip\":\"12.4.0.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/fabb4b78-c468-4338-98d1-5956f7f27cea\",\"moduleSequenceNumber\":73}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"1to-2\",\"moduleSequenceNumber\":49,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"1to-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"1to-3\",\"httpPortOpen\":false,\"ip\":\"54.3.3.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/3e639ca4-528f-4db1-8b34-0cff2ce563bd\",\"moduleSequenceNumber\":74}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"1to-3\",\"moduleSequenceNumber\":50,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"1to-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"1to-4\",\"httpPortOpen\":false,\"ip\":\"55.1.7.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/0c815953-ecb0-4187-9807-f8ec4b20a05b\",\"moduleSequenceNumber\":75}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"1to-4\",\"moduleSequenceNumber\":51,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"1to-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"1to-5\",\"httpPortOpen\":false,\"ip\":\"73.7.0.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/ee832aa4-c101-4bbd-a579-7b82f944ce45\",\"moduleSequenceNumber\":76}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"1to-5\",\"moduleSequenceNumber\":52,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"auto-1to-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"auto-1to-0\",\"httpPortOpen\":false,\"ip\":\"86.7.2.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/436605dd-2705-4817-a976-7cd5a1e30e2d\",\"moduleSequenceNumber\":77}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"auto-1to-0\",\"moduleSequenceNumber\":53,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.0-1to-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.0-1to-0\",\"httpPortOpen\":false,\"ip\":\"69.2.4.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/2d8898e7-e364-4590-975c-1af1c3d9a753\",\"moduleSequenceNumber\":78}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.0-1to-0\",\"moduleSequenceNumber\":54,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.1-1to-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.1-1to-0\",\"httpPortOpen\":false,\"ip\":\"8.9.9.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.1-1to-0\",\"moduleSequenceNumber\":55,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-0\",\"httpPortOpen\":false,\"ip\":\"99.7.0.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/05e9ced3-fcee-44f4-a533-072328993621\",\"moduleSequenceNumber\":79}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-0\",\"moduleSequenceNumber\":56,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-1\",\"httpPortOpen\":false,\"ip\":\"90.5.3.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/44670d84-ef58-43df-8dfe-ea5f6cff1c9d\",\"moduleSequenceNumber\":80}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-1\",\"moduleSequenceNumber\":57,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-0-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-0-0\",\"httpPortOpen\":false,\"ip\":\"46.3.5.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-1-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-1-0\",\"httpPortOpen\":false,\"ip\":\"58.9.6.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-2\",\"httpPortOpen\":false,\"ip\":\"64.2.0.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/a30e597e-1e05-4ed8-9f27-216f705f40c4\",\"moduleSequenceNumber\":81}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-2\",\"moduleSequenceNumber\":58,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-3\",\"httpPortOpen\":false,\"ip\":\"40.4.9.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/774e35f3-c991-4375-ae8f-77d3cdd00b0b\",\"moduleSequenceNumber\":82}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-3\",\"moduleSequenceNumber\":59,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-4\",\"httpPortOpen\":false,\"ip\":\"77.9.3.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/6a631f5f-02dd-4075-bda8-a14647863e8c\",\"moduleSequenceNumber\":83}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-4\",\"moduleSequenceNumber\":60,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-5\",\"httpPortOpen\":false,\"ip\":\"30.9.3.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/674e9ab8-b120-45c6-a6ba-597fdcf47f6e\",\"moduleSequenceNumber\":84}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-5\",\"moduleSequenceNumber\":61,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-6\",\"httpPortOpen\":false,\"ip\":\"96.9.4.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/3d37d9b3-f8f5-436d-afca-beb27fbbd17a\",\"moduleSequenceNumber\":85}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-6\",\"moduleSequenceNumber\":62,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-7\",\"httpPortOpen\":false,\"ip\":\"41.9.2.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/184dce13-ce7f-463b-bed4-41da26bfae62\",\"moduleSequenceNumber\":86}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-7\",\"moduleSequenceNumber\":63,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-8\",\"httpPortOpen\":false,\"ip\":\"58.2.2.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/47941ced-21ac-4ecb-9729-350d243ea73c\",\"moduleSequenceNumber\":87}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-8\",\"moduleSequenceNumber\":64,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.2-1to-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.2-1to-9\",\"httpPortOpen\":false,\"ip\":\"47.9.8.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/dd14bc02-243e-4488-892a-8a84a642b347\",\"moduleSequenceNumber\":88}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.2-1to-9\",\"moduleSequenceNumber\":65,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"v1.0.3-1to-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"v1.0.3-1to-0\",\"httpPortOpen\":false,\"ip\":\"93.1.3.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"let globalNs;\\nlet argsZero;\\nlet alreadyHack;\\nlet levelHome;\\n\\nexport function myPrint(toPrint) {\\n    globalNs.tprint(toPrint);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        globalNs = ns;\\n        argsZero = ns.args[0];\\n        alreadyHack = [];\\n        \\n        myPrint('The START on ' + argsZero);\\n\\n        let hostName = globalNs.getHostname();\\n        let scans = globalNs.scan();\\n        myPrint(hostName);\\n        myPrint(scans);\\n\\n        levelHome = globalNs.getHackingLevel();\\n        myPrint('LEVEL HOME ! : ' + levelHome);\\n\\n        await scanTarget(argsZero);\\n    }\\n}\\n\\nexport async function scanTarget(targetStart) {\\n    let scans = globalNs.scan(targetStart);\\n    myPrint(\\\"IN scan target\\\");\\n    myPrint(scans);\\n\\n    for (let i = 0; i < scans.length; i++) {\\n        let target = scans[i];\\n        myPrint(\\\"Target -> \\\" + target);\\n        if (target === \\\"home\\\" || target === \\\"darkweb\\\") {\\n            myPrint(\\\"Continues !\\\");\\n            continue;\\n        }\\n\\n        let levelRequireToHackSeveur = globalNs.getServerRequiredHackingLevel(target);\\n        if (levelRequireToHackSeveur > globalNs.getHackingLevel()) {\\n            myPrint(\\\"I don't have the level ! I need level : \\\" + levelRequireToHackSeveur);\\n            continue;\\n        }\\n\\n        var moneyThresh = globalNs.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = globalNs.getServerMinSecurityLevel(target) + 5;\\n        \\n        if (globalNs.fileExists('BruteSSH.exe', 'home')) {\\n            globalNs.brutessh(target);\\n        }\\n\\n        if (globalNs.fileExists('FTPCrack.exe', 'home')) {\\n            globalNs.ftpcrack(target)\\n        }\\n\\n        if (globalNs.fileExists('relaySMTP.exe', 'home')) {\\n            globalNs.relaysmtp(target);\\n        }\\n\\n        globalNs.nuke(target);\\n        if (globalNs.getServerSecurityLevel(target) > securityThresh) {\\n            myPrint('weaken');\\n            await globalNs.weaken(target);\\n        } else if (globalNs.getServerMoneyAvailable(target) < moneyThresh) {\\n            myPrint('grow');\\n            await globalNs.grow(target);\\n        } else {\\n            myPrint('hack');\\n            await globalNs.hack(target);\\n        }\\n\\n        if (find(target, alreadyHack) == false) {\\n            myPrint('NOT found ' + target + ' scan and add !');\\n            addInArray(target, alreadyHack);\\n            await scanTarget(target, alreadyHack);\\n        } else {\\n            myPrint('I found ' + target + ', NO add !');\\n        }\\n        myPrint('alreadyHack');\\n        myPrint(alreadyHack);\\n    }\\n    myPrint(\\\"END scan target\\\");\\n}\\n\\nexport function addInArray(add) {\\n    alreadyHack[alreadyHack.length] = add;\\n    myPrint('Add to table :');\\n    myPrint(alreadyHack);\\n}\\n\\nexport function find(toFind) {\\n    for (let i = 0; i < alreadyHack.length; i++) {\\n        if (alreadyHack[i] == toFind) {\\n            return true;\\n        }\\n    }\\n\\n    return false;\\n}\",\"filename\":\"hackHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackHome.js\",\"url\":\"blob:https://danielyxie.github.io/27c82fa0-fdec-4954-ba5f-3a4e1a1df4f3\",\"moduleSequenceNumber\":89}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"v1.0.3-1to-0\",\"moduleSequenceNumber\":66,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":24.3924,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.4841,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":57.8275,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":749101.5885813286}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":214.6797,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":1944190.892057322}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":186.9593,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":1729241.6050733186}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":443342.2086090053}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":214.2394,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":1816894.1878129304}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":57950.132291472015,\"lastPrice\":57875.54288828878,\"playerShares\":10,\"playerAvgPx\":23648.324026539507,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":true,\"otlkMag\":17.36475123643751,\"otlkMagForecast\":66.68545008823023,\"cap\":149940141,\"spreadPerc\":0.4,\"shareTxForMovement\":34804,\"shareTxUntilMovement\":34804,\"totalShares\":89200000,\"maxShares\":17800000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":8887.692319585,\"lastPrice\":8876.738889123935,\"playerShares\":10,\"playerAvgPx\":24312.251829604218,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.45,\"b\":false,\"otlkMag\":20.913343518169615,\"otlkMagForecast\":29.695230541740365,\"cap\":487546266,\"spreadPerc\":0.1,\"shareTxForMovement\":33407,\"shareTxUntilMovement\":33407,\"totalShares\":92800000,\"maxShares\":18600000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":10469.082630271487,\"lastPrice\":10448.740029830307,\"playerShares\":10,\"playerAvgPx\":18995.707447192875,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":13.815485541316798,\"otlkMagForecast\":65.89816726444087,\"cap\":85293087,\"spreadPerc\":0.5,\"shareTxForMovement\":79330,\"shareTxUntilMovement\":79330,\"totalShares\":86300000,\"maxShares\":17300000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":21353.357803062976,\"lastPrice\":21391.4173601876,\"playerShares\":10,\"playerAvgPx\":22277.518550822722,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":12.02216452909205,\"otlkMagForecast\":39.833960056326745,\"cap\":265584521,\"spreadPerc\":0.4,\"shareTxForMovement\":58610,\"shareTxUntilMovement\":58610,\"totalShares\":63500000,\"maxShares\":12700000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":78951.25266626842,\"lastPrice\":78810.78279181753,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":10.28348543617357,\"otlkMagForecast\":60.4027238301919,\"cap\":845035546,\"spreadPerc\":0.1,\"shareTxForMovement\":65566,\"shareTxUntilMovement\":65566,\"totalShares\":49800000,\"maxShares\":10000000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":144209.2861632687,\"lastPrice\":143814.93041837023,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":false,\"otlkMag\":15.840735960539902,\"otlkMagForecast\":32.83436870578496,\"cap\":1194787918,\"spreadPerc\":1,\"shareTxForMovement\":41867,\"shareTxUntilMovement\":41867,\"totalShares\":36500000,\"maxShares\":7300000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":15505.175169870161,\"lastPrice\":15537.062792139845,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":9.94562154587384,\"otlkMagForecast\":41.80899275657195,\"cap\":340246606,\"spreadPerc\":0.2,\"shareTxForMovement\":50254,\"shareTxUntilMovement\":50254,\"totalShares\":81900000,\"maxShares\":16400000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":170408.51210645764,\"lastPrice\":170987.93702194642,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":false,\"otlkMag\":23.010158503878497,\"otlkMagForecast\":24.583593110246575,\"cap\":846373654,\"spreadPerc\":0.1,\"shareTxForMovement\":88798,\"shareTxUntilMovement\":88798,\"totalShares\":56400000,\"maxShares\":11300000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":99257.55295370777,\"lastPrice\":99491.62319983223,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.86,\"b\":false,\"otlkMag\":6.023518743373549,\"otlkMagForecast\":46.24773900239302,\"cap\":218480022,\"spreadPerc\":0.8,\"shareTxForMovement\":80346,\"shareTxUntilMovement\":80346,\"totalShares\":53600000,\"maxShares\":10700000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":8493.217810347483,\"lastPrice\":8476.94653178137,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":10.348239617603006,\"otlkMagForecast\":60.41974051978782,\"cap\":52213111,\"spreadPerc\":0.2,\"shareTxForMovement\":59990,\"shareTxUntilMovement\":59990,\"totalShares\":62600000,\"maxShares\":12500000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":11215.336801277492,\"lastPrice\":11196.60840798692,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":9.799081548631948,\"otlkMagForecast\":40.15971925756719,\"cap\":298819986,\"spreadPerc\":0.3,\"shareTxForMovement\":67764,\"shareTxUntilMovement\":67764,\"totalShares\":61600000,\"maxShares\":12300000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":13468.108504328682,\"lastPrice\":13441.20274899366,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":7.086330270683394,\"otlkMagForecast\":42.45513563066345,\"cap\":294176557,\"spreadPerc\":0.8,\"shareTxForMovement\":59962,\"shareTxUntilMovement\":59962,\"totalShares\":74100000,\"maxShares\":14800000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":20104.695252868212,\"lastPrice\":20067.826424630737,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":8.626805195504902,\"otlkMagForecast\":55.97821217384714,\"cap\":234671544,\"spreadPerc\":0.5,\"shareTxForMovement\":97546,\"shareTxUntilMovement\":97546,\"totalShares\":42700000,\"maxShares\":8500000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":42582.12463609479,\"lastPrice\":42514.5086549523,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":10.83179301210877,\"otlkMagForecast\":58.257830306928625,\"cap\":503700997,\"spreadPerc\":0.8,\"shareTxForMovement\":54623,\"shareTxUntilMovement\":54623,\"totalShares\":34400000,\"maxShares\":6900000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":5460.969363447213,\"lastPrice\":5451.402437453271,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":6.284034389539255,\"otlkMagForecast\":43.09317260961642,\"cap\":30735232,\"spreadPerc\":0.4,\"shareTxForMovement\":118129,\"shareTxUntilMovement\":118129,\"totalShares\":78200000,\"maxShares\":15600000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":8523.86945729408,\"lastPrice\":8540.698270222045,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":4.58346195947231,\"otlkMagForecast\":55.78970989660655,\"cap\":196120086,\"spreadPerc\":0.4,\"shareTxForMovement\":62669,\"shareTxUntilMovement\":62669,\"totalShares\":51900000,\"maxShares\":10400000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":20162.784631795355,\"lastPrice\":20204.80388213655,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":9.999687582664352,\"otlkMagForecast\":59.99304210319801,\"cap\":194042114,\"spreadPerc\":1.2,\"shareTxForMovement\":119577,\"shareTxUntilMovement\":119577,\"totalShares\":31000000,\"maxShares\":6200000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":44295.86982927459,\"lastPrice\":44369.96284396991,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":7.364621875553932,\"otlkMagForecast\":58.726028489956555,\"cap\":609002383,\"spreadPerc\":1,\"shareTxForMovement\":46323,\"shareTxUntilMovement\":46323,\"totalShares\":25200000,\"maxShares\":5000000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":28545.06507492792,\"lastPrice\":28483.36260537642,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":5.443361538636704,\"otlkMagForecast\":43.841817212502654,\"cap\":346087318,\"spreadPerc\":1,\"shareTxForMovement\":118496,\"shareTxUntilMovement\":118496,\"totalShares\":23800000,\"maxShares\":4800000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":2201.358403685055,\"lastPrice\":2185.953526355991,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.57,\"b\":false,\"otlkMag\":6.348017670161983,\"otlkMagForecast\":43.3174440940286,\"cap\":65932801,\"spreadPerc\":0.6,\"shareTxForMovement\":46951,\"shareTxUntilMovement\":46951,\"totalShares\":67000000,\"maxShares\":13400000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":7233.534132722999,\"lastPrice\":7257.931324665573,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.23,\"b\":true,\"otlkMag\":6.175923831181763,\"otlkMagForecast\":57.2763386753776,\"cap\":39530053,\"spreadPerc\":0.5,\"shareTxForMovement\":66176,\"shareTxUntilMovement\":66176,\"totalShares\":38600000,\"maxShares\":7700000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":3844.8078762226696,\"lastPrice\":3850.501025867067,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":true,\"otlkMag\":2.7184068572215248,\"otlkMagForecast\":53.91087652020068,\"cap\":44703351,\"spreadPerc\":0.8,\"shareTxForMovement\":70879,\"shareTxUntilMovement\":70879,\"totalShares\":43600000,\"maxShares\":8700000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":6001.422106653455,\"lastPrice\":6030.714737089067,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.78,\"b\":true,\"otlkMag\":7.4397952573262165,\"otlkMagForecast\":58.075793401507504,\"cap\":160145617,\"spreadPerc\":1,\"shareTxForMovement\":50923,\"shareTxUntilMovement\":50923,\"totalShares\":33400000,\"maxShares\":6700000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":2882.1532105511656,\"lastPrice\":2869.798424143442,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.57,\"b\":false,\"otlkMag\":7.1940322090939866,\"otlkMagForecast\":42.4533706713837,\"cap\":54368591,\"spreadPerc\":0.8,\"shareTxForMovement\":15282,\"shareTxUntilMovement\":15282,\"totalShares\":35300000,\"maxShares\":7100000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":5055.617889706828,\"lastPrice\":5067.540103065309,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.86,\"b\":false,\"otlkMag\":6.089024865533827,\"otlkMagForecast\":45.035866678297594,\"cap\":49204517,\"spreadPerc\":1,\"shareTxForMovement\":81187,\"shareTxUntilMovement\":81187,\"totalShares\":59900000,\"maxShares\":12000000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":323.12543709412654,\"lastPrice\":325.4468726698622,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.62,\"b\":true,\"otlkMag\":6.40792264310233,\"otlkMagForecast\":54.553270313241704,\"cap\":29904537,\"spreadPerc\":1.8,\"shareTxForMovement\":19154,\"shareTxUntilMovement\":19154,\"totalShares\":13500000,\"maxShares\":2700000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":16670.38404184783,\"lastPrice\":16719.752953915842,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.08,\"b\":true,\"otlkMag\":2.5884569443946046,\"otlkMagForecast\":52.11714418779866,\"cap\":37133471,\"spreadPerc\":0.9,\"shareTxForMovement\":79809,\"shareTxUntilMovement\":79809,\"totalShares\":11700000,\"maxShares\":2300000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1794.6833709492453,\"lastPrice\":1791.1470803838783,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":7.589326613983062,\"otlkMagForecast\":56.5721348815986,\"cap\":15759673,\"spreadPerc\":1,\"shareTxForMovement\":107130,\"shareTxUntilMovement\":107130,\"totalShares\":13400000,\"maxShares\":2700000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":477.64119654783127,\"lastPrice\":479.9594410602767,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.77,\"b\":false,\"otlkMag\":5.121659594599254,\"otlkMagForecast\":47.84722958692104,\"cap\":35035223,\"spreadPerc\":1.2,\"shareTxForMovement\":29710,\"shareTxUntilMovement\":29710,\"totalShares\":14700000,\"maxShares\":2900000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":501.1716720405431,\"lastPrice\":496.75826172903584,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.24,\"b\":true,\"otlkMag\":8.955961845598123,\"otlkMagForecast\":57.094065354290024,\"cap\":10013409,\"spreadPerc\":0.7,\"shareTxForMovement\":24135,\"shareTxUntilMovement\":24135,\"totalShares\":62100000,\"maxShares\":12400000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":238.85485122276154,\"lastPrice\":239.83074945480735,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.49,\"b\":true,\"otlkMag\":9.980493670204122,\"otlkMagForecast\":59.99329331269814,\"cap\":862603,\"spreadPerc\":1.1,\"shareTxForMovement\":43586,\"shareTxUntilMovement\":43586,\"totalShares\":336700000,\"maxShares\":67300000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":42424.894352804164,\"lastPrice\":42510.98117680005,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":6.594519438050575,\"otlkMagForecast\":56.48284602918494,\"cap\":365303279,\"spreadPerc\":0.3,\"shareTxForMovement\":135123,\"shareTxUntilMovement\":135123,\"totalShares\":12500000,\"maxShares\":2500000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":27374.273219691146,\"lastPrice\":27412.555426944265,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.51,\"b\":true,\"otlkMag\":10.914857492086659,\"otlkMagForecast\":61.07285001478341,\"cap\":104965773,\"spreadPerc\":1,\"shareTxForMovement\":144606,\"shareTxUntilMovement\":144606,\"totalShares\":20400000,\"maxShares\":4100000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":2990022,\"lastUpdate\":1644945210121,\"ticksUntilCycle\":3}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-15,\"y\":5,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1644945213196","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644945213209"}}